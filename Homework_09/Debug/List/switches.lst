###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           06/Apr/2018  10:17:48
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\switches.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW92C9.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\switches.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\Debug\List\switches.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Homework_09\Debug\Obj\switches.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Homework_09\switches.c
      1          //===============================================================
      2          //  File Name: switches.c
      3          //  Description: This file contains the functions needed for controlling
      4          //                    button enabled status.
      5          //
      6          //  Author: Sam Messick
      7          //  Date Feb. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "switches.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x244
   \   union <unnamed> _A_PCDIR_L
   \                     _A_PCDIR_L:
   \   000000                DS8 2
     12          
     13          //Enable right switch

   \                                 In  segment CODE, align 2
     14          void enable_switch_BUTTON1(void){
   \                     enable_switch_BUTTON1:
     15            P5OUT |= BUTTON1;                     // Select pull up resistor
   \   000000   F2D040004202 BIS.B   #0x40, &0x242
     16            P5DIR &= ~BUTTON1;                    // Set direction to input
   \   000006   F2C040004402 BIC.B   #0x40, &0x244
     17          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCOUT_L
   \   00000E                REQUIRE _A_PCDIR_L
     18          
     19          // Enable left switch

   \                                 In  segment CODE, align 2
     20          void enable_switch_BUTTON2(void){
   \                     enable_switch_BUTTON2:
     21            P5OUT |= BUTTON2;                     // Select pull up resistor
   \   000000   F2D020004202 BIS.B   #0x20, &0x242
     22            P5DIR &= ~BUTTON2;                    // Set direction to input
   \   000006   F2C020004402 BIC.B   #0x20, &0x244
     23          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCOUT_L
   \   00000E                REQUIRE _A_PCDIR_L
     24          //----------------------------------------------------------------
     25          // Begin with switches enabled

   \                                 In  segment CODE, align 2
     26          void Init_Switches(void){               
   \                     Init_Switches:
     27            enable_switch_BUTTON1();
   \   000000   ........     CALLA   #enable_switch_BUTTON1
     28            enable_switch_BUTTON2();
   \   000004   ........     BRA     #enable_switch_BUTTON2
     29          }
     30          //----------------------------------------------------------------

   \                                 In  segment CODE, align 2
     31          void disable_switch_BUTTON1(void){
   \                     disable_switch_BUTTON1:
     32            P5DIR |= BUTTON1;                     // Set direction to output
   \   000000   F2D040004402 BIS.B   #0x40, &0x244
     33            P5OUT &= ~BUTTON1;                    // Set output to low
   \   000006   F2C040004202 BIC.B   #0x40, &0x242
     34          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCDIR_L
   \   00000E                REQUIRE _A_PCOUT_L

   \                                 In  segment CODE, align 2
     35          void disable_switch_BUTTON2(void){
   \                     disable_switch_BUTTON2:
     36            P5DIR |= BUTTON2;                     // Set direction to output
   \   000000   F2D020004402 BIS.B   #0x20, &0x244
     37            P5OUT &= ~BUTTON2;                    // Set output to low
   \   000006   F2C020004202 BIC.B   #0x20, &0x242
     38          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCDIR_L
   \   00000E                REQUIRE _A_PCOUT_L

   \                                 In  segment CODE, align 2
     39          void Disable_Switches(void){               
   \                     Disable_Switches:
     40            disable_switch_BUTTON1();
   \   000000   ........     CALLA   #disable_switch_BUTTON1
     41            disable_switch_BUTTON2();
   \   000004   ........     BRA     #disable_switch_BUTTON2
     42          }
     43          //----------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Disable_Switches
        4   -> disable_switch_BUTTON1
        0   -> disable_switch_BUTTON2
      4   Init_Switches
        4   -> enable_switch_BUTTON1
        0   -> enable_switch_BUTTON2
      4   disable_switch_BUTTON1
      4   disable_switch_BUTTON2
      4   enable_switch_BUTTON1
      4   enable_switch_BUTTON2


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  Disable_Switches
       8  Init_Switches
       2  _A_PCDIR_L
       2  _A_PCOUT_L
      14  disable_switch_BUTTON1
      14  disable_switch_BUTTON2
      14  enable_switch_BUTTON1
      14  enable_switch_BUTTON2

 
 72 bytes in segment CODE
  4 bytes in segment DATA16_AN
 
 72 bytes of CODE memory
  0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
