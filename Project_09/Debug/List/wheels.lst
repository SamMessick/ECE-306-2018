###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           26/Apr/2018  11:28:31
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\wheels.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW4896.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\wheels.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List\wheels.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj\wheels.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_09\wheels.c
      1          //===============================================================
      2          //  File Name: wheels.c
      3          //  Description: This file contains the functions needed for control
      4          //                    operations of the wheels
      5          //
      6          //  Author: Sam Messick
      7          //  Date Feb. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "wheels.h"

   \                                 In  segment DATA16_AN, at 0x800
   \   union <unnamed> _A_ADC12CTL0_L
   \                     _A_ADC12CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x812
   \   union <unnamed> _A_ADC12IER0_L
   \                     _A_ADC12IER0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   union <unnamed> _A_TA0CCTL0_L
   \                     _A_TA0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x344
   \   union <unnamed> _A_TA0CCTL1_L
   \                     _A_TA0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x346
   \   union <unnamed> _A_TA0CCTL2_L
   \                     _A_TA0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d8
   \   union <unnamed> _A_TB0CCR3_L
   \                     _A_TB0CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3da
   \   union <unnamed> _A_TB0CCR4_L
   \                     _A_TB0CCR4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3dc
   \   union <unnamed> _A_TB0CCR5_L
   \                     _A_TB0CCR5_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3de
   \   union <unnamed> _A_TB0CCR6_L
   \                     _A_TB0CCR6_L:
   \   000000                DS8 2
     12          
     13          // H-bridge protection flags: 
     14          // don't allow for motion forward/backward simultaneously in one motor
     15          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          uint8_t left_forward_flag;     // Is left motor rotating forward?
   \                     left_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          uint8_t left_reverse_flag;     // Is left motor rotating reverse?
   \                     left_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          uint8_t right_forward_flag;    // Is right motor rotating forward?
   \                     right_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          uint8_t right_reverse_flag;    // Is right motor rotating reverse?
   \                     right_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          uint8_t instruction_label_tmp; // Global of current instruction step
   \                     instruction_label_tmp:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          uint8_t LastDir;
   \                     LastDir:
   \   000000                DS8 1
     22          
     23          //--------PID fields-----------//

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          int16_t   right_pwm;
   \                     right_pwm:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          int16_t   left_pwm;
   \                     left_pwm:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          PID ld; // Left infrared detector
   \                     ld:
   \   000000                DS8 18

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          PID rd;
   \                     rd:
   \   000000                DS8 18
     28          //-----------------------------//
     29          
     30          

   \                                 In  segment CODE, align 2
     31          void Init_PID(void){
   \                     Init_PID:
     32            /*
     33            ld.windup_guard = L_PWM_MAX;
     34            rd.windup_guard = R_PWM_MAX;
     35            ld.p_gain = 1.5;//((double)(ADC_Thumb))/1000;     // 1.15
     36            ld.i_gain = 0; 
     37            ld.d_gain = 6;//1.5;
     38            rd.p_gain = 3;//((double)(ADC_Thumb))/1000;
     39            rd.i_gain = 0; 
     40            rd.d_gain = 6;//1.5;
     41            right_pwm = RIGHT_FORWARD_SPEED;
     42            left_pwm = LEFT_FORWARD_SPEED;
     43          */
     44          }
   \   000000   1001         RETA
     45          

   \                                 In  segment CODE, align 2
     46          void pid_udpate_left(void){
   \                     pid_udpate_left:
     47            
     48            if(ADC_Left_Detector >= ir_black_reading)
   \   000000   9292........ CMP.W   &ir_black_reading, &ADC_Left_Detector
   \   000006   1628         JNC     ??pid_udpate_left_0
     49              if(ADC_Right_Detector >= ir_black_reading)
   \   000008   9292........ CMP.W   &ir_black_reading, &ADC_Right_Detector
   \   00000E   0828         JNC     ??pid_udpate_left_1
     50              {
     51                Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
   \   000010   7C40EB00     MOV.B   #0xeb, R12
   \   000014   ........     CALLA   #Left_Motor_ON_FORWARD
     52                Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
   \   000018   7C409100     MOV.B   #0x91, R12
   \   00001C   ........     BRA     #Right_Motor_ON_FORWARD
     53              }
     54              else
     55              {
     56                Left_Motor_ON_FORWARD(LEFT_R_SEARCH_SPEED);
   \                     ??pid_udpate_left_1:
   \   000020   4C43         MOV.B   #0x0, R12
   \   000022   ........     CALLA   #Left_Motor_ON_FORWARD
     57                Right_Motor_ON_FORWARD(RIGHT_R_SEARCH_SPEED);
   \   000026   7C405000     MOV.B   #0x50, R12
   \   00002A   ........     CALLA   #Right_Motor_ON_FORWARD
     58                LastDir = GOING_LEFT;
   \   00002E   C243....     MOV.B   #0x0, &LastDir
   \   000032   1001         RETA
     59              }
     60            else 
     61              if(ADC_Right_Detector >= ir_black_reading)
   \                     ??pid_udpate_left_0:
   \   000034   9292........ CMP.W   &ir_black_reading, &ADC_Right_Detector
   \   00003A   0A28         JNC     ??pid_udpate_left_2
     62              {
     63            
     64                Left_Motor_ON_FORWARD(LEFT_L_SEARCH_SPEED);
   \   00003C   7C407800     MOV.B   #0x78, R12
   \   000040   ........     CALLA   #Left_Motor_ON_FORWARD
     65                Right_Motor_ON_FORWARD(RIGHT_L_SEARCH_SPEED);
   \   000044   4C43         MOV.B   #0x0, R12
   \   000046   ........     CALLA   #Right_Motor_ON_FORWARD
     66                LastDir = GOING_RIGHT;
   \   00004A   D243....     MOV.B   #0x1, &LastDir
   \   00004E   1001         RETA
     67              }
     68              else 
     69              {
     70                word4 = "  White   ";
   \                     ??pid_udpate_left_2:
   \   000050   B240........ MOV.W   #`?<Constant "  White   ">`, &word4
     71                if(LastDir == GOING_LEFT)
   \   000056   C293....     CMP.B   #0x0, &LastDir
   \   00005A   0720         JNE     ??pid_udpate_left_3
     72                {
     73                  Left_Motor_ON_FORWARD(LEFT_R_SEARCH_SPEED);
   \   00005C   4C43         MOV.B   #0x0, R12
   \   00005E   ........     CALLA   #Left_Motor_ON_FORWARD
     74                  Right_Motor_ON_FORWARD(RIGHT_R_SEARCH_SPEED);
   \   000062   7C405000     MOV.B   #0x50, R12
   \   000066   ........     BRA     #Right_Motor_ON_FORWARD
     75                }
     76                else
     77                {
     78                  Left_Motor_ON_FORWARD(LEFT_L_SEARCH_SPEED);
   \                     ??pid_udpate_left_3:
   \   00006A   7C407800     MOV.B   #0x78, R12
   \   00006E   ........     CALLA   #Left_Motor_ON_FORWARD
     79                  Right_Motor_ON_FORWARD(RIGHT_L_SEARCH_SPEED);
   \   000072   4C43         MOV.B   #0x0, R12
   \   000074   ........     BRA     #Right_Motor_ON_FORWARD
     80                }
     81              }
     82            /*
     83            // Attempted PID
     84             Uses a PID with noise bands at ir_white_reading and 
     85             ir_black_reading, adjusting for changes to follow
     86             a black line.
     87          
     88            // Take NUM_SAMPLES from PID in pid_samples for averaging
     89            static uint8_t samp_index; 
     90            static int16_t[NUM_SAMPLES] pid_error_l_samples; 
     91            static int16_t error_l;
     92            static int16_t d_error_l;
     93            
     94            int16_t error_l_w;
     95            int16_t error_l_b;
     96            
     97            // Update PID errors
     98            error_l_w = ADC_Left_Detector - ir_white_reading;
     99            error_l_b = ADC_Left_Detector - ir_black_reading;
    100            
    101            // Check if error falls outside of noise bands
    102            if(error_l_w < 0)
    103            {
    104              error_l = error_l_w;
    105              pid_error_l_samples
    106            }
    107            else if(error_l_b > 0)
    108              error_l = error_l_b;
    109            else
    110              return;
    111            
    112            
    113            
    114            if(error_l IS_POSITIVE)
    115              P1OUT  |= RED_LED;
    116            else
    117              P1OUT  &= ~RED_LED;
    118            ld.i_error = error_l + ld.i_error;
    119            d_error_l = error_l - ld.prev_error;
    120            if(d_error_l IS_POSITIVE)
    121              P1OUT  |= GRN_LED;
    122            else
    123              P1OUT  &= ~GRN_LED;
    124            
    125            if(ld.i_error > ld.windup_guard)
    126              ld.i_error = ld.windup_guard;
    127            else if(ld.i_error < -ld.windup_guard)
    128              ld.i_error = -ld.windup_guard;
    129            
    130            // Calculate adjusted pwm
    131            left_pwm =  (uint8_t)(LEFT_FORWARD_SPEED    -
    132                        (ld.p_gain * error_l) -
    133                        (ld.i_gain * ld.i_error) -
    134                        (ld.d_gain * d_error_l));
    135            right_pwm = (uint8_t)(RIGHT_FORWARD_SPEED  +
    136                        (rd.p_gain * error_l) +
    137                        (rd.i_gain * ld.i_error) +
    138                        (rd.d_gain * d_error_l));
    139            if(left_pwm > L_PWM_MAX)
    140              left_pwm = L_PWM_MAX;
    141            if(left_pwm < L_PWM_MIN)
    142              left_pwm = L_PWM_MIN;
    143            if(right_pwm > R_PWM_MAX)
    144              right_pwm = R_PWM_MAX;
    145            if(right_pwm < R_PWM_MIN)
    146              right_pwm = R_PWM_MIN;
    147            
    148            // Enable motor
    149            Left_Motor_ON_FORWARD(left_pwm);
    150            Right_Motor_ON_FORWARD(right_pwm);
    151            
    152            ld.prev_error = error_l;
    153          */
    154          }
    155          

   \                                 In  segment CODE, align 2
    156          void initialize_delay(uint16_t delay){
   \                     initialize_delay:
    157            delay_time = delay;                          // send delay time to global accessible by timer A1
   \   000000   824C....     MOV.W   R12, &delay_time
    158            TA0CCTL2 |= CCIE;                            // enable timer A1.2 to count time
   \   000004   B2D010004603 BIS.W   #0x10, &0x346
    159          }
   \   00000A   1001         RETA
   \   00000C                REQUIRE _A_TA0CCTL2_L
    160          

   \                                 In  segment CODE, align 2
    161          void update_instruction_label(uint8_t* instruction_label){
   \                     update_instruction_label:
    162            (*instruction_label)++;                         // Set up next instruction
   \   000000   DC530000     ADD.B   #0x1, 0(R12)
    163            instruction_label_tmp = *instruction_label;   // Set static instruction visable by menu to update LCD
   \   000004   E24C....     MOV.B   @R12, &instruction_label_tmp
    164          }
   \   000008   1001         RETA
    165          
    166          void WHEELS_test(void);
    167          //------------------------
    168          // Turning wheels off
    169          //------------------------

   \                                 In  segment CODE, align 2
    170          void Left_Motor_OFF(void){
   \                     Left_Motor_OFF:
    171            TB0CCR3 = MOTOR_OFF;         // Set PWM to 0 percent duty cycle
   \   000000   8243D803     MOV.W   #0x0, &0x3d8
    172            TB0CCR4 = MOTOR_OFF;   
   \   000004   8243DA03     MOV.W   #0x0, &0x3da
    173            left_forward_flag = left_reverse_flag = false;
   \   000008   C243....     MOV.B   #0x0, &left_reverse_flag
   \   00000C   D242........ MOV.B   &left_reverse_flag, &left_forward_flag
    174          }
   \   000012   1001         RETA
   \   000014                REQUIRE _A_TB0CCR3_L
   \   000014                REQUIRE _A_TB0CCR4_L

   \                                 In  segment CODE, align 2
    175          void Right_Motor_OFF(void){
   \                     Right_Motor_OFF:
    176            TB0CCR5 = MOTOR_OFF;         // Set PWM to 0 percent duty cycle
   \   000000   8243DC03     MOV.W   #0x0, &0x3dc
    177            TB0CCR6 = MOTOR_OFF;         
   \   000004   8243DE03     MOV.W   #0x0, &0x3de
    178            right_forward_flag = right_reverse_flag = false;
   \   000008   C243....     MOV.B   #0x0, &right_reverse_flag
   \   00000C   D242........ MOV.B   &right_reverse_flag, &right_forward_flag
    179          }
   \   000012   1001         RETA
   \   000014                REQUIRE _A_TB0CCR5_L
   \   000014                REQUIRE _A_TB0CCR6_L

   \                                 In  segment CODE, align 2
    180          void Wheels_OFF(void){
   \                     Wheels_OFF:
    181            Left_Motor_OFF();
   \   000000   ........     CALLA   #Left_Motor_OFF
    182            Right_Motor_OFF();
   \   000004   ........     BRA     #Right_Motor_OFF
    183          }
    184          
    185          //------------------------
    186          // Turning wheels on
    187          //------------------------
    188          //**********
    189          // Forward *
    190          //**********

   \                                 In  segment CODE, align 2
    191          void Left_Motor_ON_FORWARD(uint8_t speed){
   \                     Left_Motor_ON_FORWARD:
    192            if(!left_reverse_flag)                         // If left motor is not set to move backward already
   \   000000   C293....     CMP.B   #0x0, &left_reverse_flag
   \   000004   0A20         JNE     ??Left_Motor_ON_FORWARD_0
    193            {
    194              TB0CCR4 = speed*DUTY_CYCLE_DIVISOR;         // Set left motor forward speed as one of 255 settings
   \   000006   4F4C         MOV.B   R12, R15
   \   000008   0E4F         MOV.W   R15, R14
   \   00000A   3FF0FF00     AND.W   #0xff, R15
   \   00000E   8F10         SWPB    R15
   \   000010   0F5E         ADD.W   R14, R15
   \   000012   824FDA03     MOV.W   R15, &0x3da
    195              left_forward_flag = true;                   // Prevent left motor from moving backward simultaneously
   \   000016   D243....     MOV.B   #0x1, &left_forward_flag
    196            }
    197          }
   \                     ??Left_Motor_ON_FORWARD_0:
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_TB0CCR4_L
    198          

   \                                 In  segment CODE, align 2
    199          void Right_Motor_ON_FORWARD(uint8_t speed){
   \                     Right_Motor_ON_FORWARD:
    200            if(!right_reverse_flag)                        // If right motor is not set to move backward already
   \   000000   C293....     CMP.B   #0x0, &right_reverse_flag
   \   000004   0A20         JNE     ??Right_Motor_ON_FORWARD_0
    201            { 
    202              TB0CCR6 = speed*DUTY_CYCLE_DIVISOR;         // Set right motor forward speed as one of 255 settings
   \   000006   4F4C         MOV.B   R12, R15
   \   000008   0E4F         MOV.W   R15, R14
   \   00000A   3FF0FF00     AND.W   #0xff, R15
   \   00000E   8F10         SWPB    R15
   \   000010   0F5E         ADD.W   R14, R15
   \   000012   824FDE03     MOV.W   R15, &0x3de
    203              right_forward_flag = true;                  // Prevent right motor from moving backward simultaneously
   \   000016   D243....     MOV.B   #0x1, &right_forward_flag
    204            }
    205          }
   \                     ??Right_Motor_ON_FORWARD_0:
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_TB0CCR6_L
    206          

   \                                 In  segment CODE, align 2
    207          void Drive_Straight_Forward(uint8_t speed){
   \                     Drive_Straight_Forward:
   \   000000   4D4C         MOV.B   R12, R13
    208            Left_Motor_ON_FORWARD(speed);
   \   000002   4C4D         MOV.B   R13, R12
   \   000004   ........     CALLA   #Left_Motor_ON_FORWARD
    209            Right_Motor_ON_FORWARD(speed);
   \   000008   4C4D         MOV.B   R13, R12
   \   00000A   ........     BRA     #Right_Motor_ON_FORWARD
    210          }
    211            
    212          //**********
    213          // Reverse *
    214          //**********

   \                                 In  segment CODE, align 2
    215          void Left_Motor_ON_REVERSE(uint8_t speed){
   \                     Left_Motor_ON_REVERSE:
    216            if(!left_forward_flag)                        // If left motor is not set to move forward already
   \   000000   C293....     CMP.B   #0x0, &left_forward_flag
   \   000004   0A20         JNE     ??Left_Motor_ON_REVERSE_0
    217            { 
    218              TB0CCR3 = speed*DUTY_CYCLE_DIVISOR;         // Set left motor reverse speed as one of 255 settings
   \   000006   4F4C         MOV.B   R12, R15
   \   000008   0E4F         MOV.W   R15, R14
   \   00000A   3FF0FF00     AND.W   #0xff, R15
   \   00000E   8F10         SWPB    R15
   \   000010   0F5E         ADD.W   R14, R15
   \   000012   824FD803     MOV.W   R15, &0x3d8
    219              left_reverse_flag = true;                   // Prevent left motor from moving forward simultaneously
   \   000016   D243....     MOV.B   #0x1, &left_reverse_flag
    220            }
    221          }
   \                     ??Left_Motor_ON_REVERSE_0:
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_TB0CCR3_L
    222          

   \                                 In  segment CODE, align 2
    223          void Right_Motor_ON_REVERSE(char speed){
   \                     Right_Motor_ON_REVERSE:
    224            if(!right_forward_flag)                       // If right motor is not set to move forward already
   \   000000   C293....     CMP.B   #0x0, &right_forward_flag
   \   000004   0A20         JNE     ??Right_Motor_ON_REVERSE_0
    225            {
    226              TB0CCR5 = speed*DUTY_CYCLE_DIVISOR;         // Set right motor reverse speed as one of 255 settings
   \   000006   4F4C         MOV.B   R12, R15
   \   000008   0E4F         MOV.W   R15, R14
   \   00000A   3FF0FF00     AND.W   #0xff, R15
   \   00000E   8F10         SWPB    R15
   \   000010   0F5E         ADD.W   R14, R15
   \   000012   824FDC03     MOV.W   R15, &0x3dc
    227              right_reverse_flag = true;                  // Prevent right motor from moving forward simultaneously
   \   000016   D243....     MOV.B   #0x1, &right_reverse_flag
    228            }
    229          }
   \                     ??Right_Motor_ON_REVERSE_0:
   \   00001A   1001         RETA
   \   00001C                REQUIRE _A_TB0CCR5_L
    230          

   \                                 In  segment CODE, align 2
    231          void turn(uint8_t degrees){
   \                     turn:
   \   000000   0A12         PUSH.W  R10
   \   000002   4A4C         MOV.B   R12, R10
    232            if(degrees == LEAVE_COURSE)
   \   000004   7A902D00     CMP.B   #0x2d, R10
   \   000008   4220         JNE     ??turn_9
    233            {
    234              delay_time = LONG_DELAY;
   \   00000A   B240EE02.... MOV.W   #0x2ee, &delay_time
    235              Wheels_OFF();
   \   000010   ........     CALLA   #Wheels_OFF
    236              waiting = true;
   \   000014   D243....     MOV.B   #0x1, &waiting
    237              TA0CCTL2 |= CCIE;
   \   000018   B2D010004603 BIS.W   #0x10, &0x346
    238              while(waiting);
   \                     ??turn_0:
   \   00001E   C293....     CMP.B   #0x0, &waiting
   \   000022   FD23         JNE     ??turn_0
    239              delay_time = EXIT_DELAY;
   \   000024   B2408813.... MOV.W   #0x1388, &delay_time
    240              LCD_print(" Exiting  ", word2, word3, word4);
   \   00002A   1F42....     MOV.W   &word4, R15
   \   00002E   1E42....     MOV.W   &word3, R14
   \   000032   1D42....     MOV.W   &word2, R13
   \   000036   3C40....     MOV.W   #`?<Constant " Exiting  ">`, R12
   \   00003A   ........     CALLA   #LCD_print
    241              Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
   \   00003E   7C40EB00     MOV.B   #0xeb, R12
   \   000042   ........     CALLA   #Left_Motor_ON_FORWARD
    242              Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
   \   000046   7C409100     MOV.B   #0x91, R12
   \   00004A   ........     CALLA   #Right_Motor_ON_FORWARD
    243              waiting = true;
   \   00004E   D243....     MOV.B   #0x1, &waiting
    244              TA0CCTL2 |= CCIE;
   \   000052   B2D010004603 BIS.W   #0x10, &0x346
    245              while(waiting);
   \                     ??turn_1:
   \   000058   C293....     CMP.B   #0x0, &waiting
   \   00005C   FD23         JNE     ??turn_1
    246              Wheels_OFF();
   \   00005E   ........     CALLA   #Wheels_OFF
    247              TA0CCTL0 &= ~CCIE;
   \   000062   B2C010004203 BIC.W   #0x10, &0x342
    248              TA0CCTL1 &= ~CCIE;
   \   000068   B2C010004403 BIC.W   #0x10, &0x344
    249              LCD_print("P10 Finit ", word2, word3, word4);
   \   00006E   1F42....     MOV.W   &word4, R15
   \   000072   1E42....     MOV.W   &word3, R14
   \   000076   1D42....     MOV.W   &word2, R13
   \   00007A   3C40....     MOV.W   #`?<Constant "P10 Finit ">`, R12
   \   00007E   ........     CALLA   #LCD_print
    250              waiting = true;
   \   000082   D243....     MOV.B   #0x1, &waiting
    251              while(waiting);
   \                     ??turn_2:
   \   000086   C293....     CMP.B   #0x0, &waiting
   \   00008A   FD23         JNE     ??turn_2
   \   00008C   613C         JMP     ??turn_8
    252            }
    253            else
    254            {
    255              delay_time = LONG_DELAY;
   \                     ??turn_9:
   \   00008E   B240EE02.... MOV.W   #0x2ee, &delay_time
    256              Wheels_OFF();
   \   000094   ........     CALLA   #Wheels_OFF
    257              waiting = true;
   \   000098   D243....     MOV.B   #0x1, &waiting
    258              TA0CCTL2 |= CCIE;
   \   00009C   B2D010004603 BIS.W   #0x10, &0x346
    259              while(waiting);
   \                     ??turn_3:
   \   0000A2   C293....     CMP.B   #0x0, &waiting
   \   0000A6   FD23         JNE     ??turn_3
    260              delay_time = SHORT_DELAY;
   \   0000A8   B240FA00.... MOV.W   #0xfa, &delay_time
    261              LCD_print("", word2, word3, word4);
   \   0000AE   1F42....     MOV.W   &word4, R15
   \   0000B2   1E42....     MOV.W   &word3, R14
   \   0000B6   1D42....     MOV.W   &word2, R13
   \   0000BA   3C40....     MOV.W   #`?<Constant "">`, R12
   \   0000BE   ........     CALLA   #LCD_print
    262              Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
   \   0000C2   7C40EB00     MOV.B   #0xeb, R12
   \   0000C6   ........     CALLA   #Left_Motor_ON_FORWARD
    263              Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
   \   0000CA   7C409100     MOV.B   #0x91, R12
   \   0000CE   ........     CALLA   #Right_Motor_ON_FORWARD
    264              waiting = true;
   \   0000D2   D243....     MOV.B   #0x1, &waiting
    265              TA0CCTL2 |= CCIE;
   \   0000D6   B2D010004603 BIS.W   #0x10, &0x346
    266              while(waiting);
   \                     ??turn_4:
   \   0000DC   C293....     CMP.B   #0x0, &waiting
   \   0000E0   FD23         JNE     ??turn_4
    267              delay_time = SHORT_DELAY;
   \   0000E2   B240FA00.... MOV.W   #0xfa, &delay_time
    268              Wheels_OFF();
   \   0000E8   ........     CALLA   #Wheels_OFF
    269              waiting = true;
   \   0000EC   D243....     MOV.B   #0x1, &waiting
    270              TA0CCTL2 |= CCIE;
   \   0000F0   B2D010004603 BIS.W   #0x10, &0x346
    271              while(waiting);
   \                     ??turn_5:
   \   0000F6   C293....     CMP.B   #0x0, &waiting
   \   0000FA   FD23         JNE     ??turn_5
    272              delay_time = LONG_DELAY;
   \   0000FC   B240EE02.... MOV.W   #0x2ee, &delay_time
    273              LCD_print("Turning in", word2, word3, word4);
   \   000102   1F42....     MOV.W   &word4, R15
   \   000106   1E42....     MOV.W   &word3, R14
   \   00010A   1D42....     MOV.W   &word2, R13
   \   00010E   3C40....     MOV.W   #`?<Constant "Turning in">`, R12
   \   000112   ........     CALLA   #LCD_print
    274              Left_Motor_ON_REVERSE(LEFT_SPIN_SPEED);
   \   000116   7C40FD00     MOV.B   #0xfd, R12
   \   00011A   ........     CALLA   #Left_Motor_ON_REVERSE
    275              Right_Motor_ON_FORWARD(RIGHT_SPIN_SPEED);
   \   00011E   7C40FD00     MOV.B   #0xfd, R12
   \   000122   ........     CALLA   #Right_Motor_ON_FORWARD
    276              waiting = true;
   \   000126   D243....     MOV.B   #0x1, &waiting
    277              TA0CCTL2 |= CCIE;
   \   00012A   B2D010004603 BIS.W   #0x10, &0x346
    278              while(waiting);
   \                     ??turn_6:
   \   000130   C293....     CMP.B   #0x0, &waiting
   \   000134   FD23         JNE     ??turn_6
    279              delay_time = SHORT_DELAY;
   \   000136   B240FA00.... MOV.W   #0xfa, &delay_time
    280              Wheels_OFF();
   \   00013C   ........     CALLA   #Wheels_OFF
    281              waiting = true;
   \   000140   D243....     MOV.B   #0x1, &waiting
    282              TA0CCTL2 |= CCIE;
   \   000144   B2D010004603 BIS.W   #0x10, &0x346
    283              while(waiting);
   \                     ??turn_7:
   \   00014A   C293....     CMP.B   #0x0, &waiting
   \   00014E   FD23         JNE     ??turn_7
    284            }
    285          }
   \                     ??turn_8:
   \   000150   3A41         POP.W   R10
   \   000152   1001         RETA
   \   000154                REQUIRE _A_TA0CCTL2_L
   \   000154                REQUIRE _A_TA0CCTL0_L
   \   000154                REQUIRE _A_TA0CCTL1_L

   \                                 In  segment CODE, align 2
    286          void drive_to_black_line(void){
   \                     drive_to_black_line:
    287            LCD_print("Searching ", word2, word3, word4);
   \   000000   1F42....     MOV.W   &word4, R15
   \   000004   1E42....     MOV.W   &word3, R14
   \   000008   1D42....     MOV.W   &word2, R13
   \   00000C   3C40....     MOV.W   #`?<Constant "Searching ">`, R12
   \   000010   ........     CALLA   #LCD_print
    288            Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
   \   000014   7C40EB00     MOV.B   #0xeb, R12
   \   000018   ........     CALLA   #Left_Motor_ON_FORWARD
    289            Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
   \   00001C   7C409100     MOV.B   #0x91, R12
   \   000020   ........     CALLA   #Right_Motor_ON_FORWARD
    290            while(ADC_Left_Detector < IR_ACTIVE_READING
    291               && ADC_Right_Detector < IR_ACTIVE_READING)
   \                     ??drive_to_black_line_1:
   \   000024   B2901405.... CMP.W   #0x514, &ADC_Left_Detector
   \   00002A   0B2C         JC      ??drive_to_black_line_3
   \   00002C   B2901405.... CMP.W   #0x514, &ADC_Right_Detector
   \   000032   072C         JC      ??drive_to_black_line_3
    292            {
    293              while(ADC12CTL0 & ADC12BUSY);
   \                     ??drive_to_black_line_0:
   \   000034   92B30008     BIT.W   #0x1, &0x800
   \   000038   FD2F         JC      ??drive_to_black_line_0
    294              ADC12IER0  |= (ADC12IE2     | // Enable interrupts for new sample results
    295                             ADC12IE4     |
    296                             ADC12IE5);
   \   00003A   B2D034001208 BIS.W   #0x34, &0x812
   \   000040   F13F         JMP     ??drive_to_black_line_1
    297            }
    298            Wheels_OFF();
   \                     ??drive_to_black_line_3:
   \   000042   ........     CALLA   #Wheels_OFF
    299            delay_time = HALF_SEC;
   \   000046   B2400A00.... MOV.W   #0xa, &delay_time
    300            waiting = true;
   \   00004C   D243....     MOV.B   #0x1, &waiting
    301            TA0CCTL2 |= CCIE;
   \   000050   B2D010004603 BIS.W   #0x10, &0x346
    302            while(waiting);
   \                     ??drive_to_black_line_2:
   \   000056   C293....     CMP.B   #0x0, &waiting
   \   00005A   FD23         JNE     ??drive_to_black_line_2
    303          }
   \   00005C   1001         RETA
   \   00005E                REQUIRE _A_ADC12CTL0_L
   \   00005E                REQUIRE _A_ADC12IER0_L
   \   00005E                REQUIRE _A_TA0CCTL2_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  White   ">`:
   \   000000   202057686974 DC8 "  White   "
   \            6520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Exiting  ">`:
   \   000000   204578697469 DC8 " Exiting  "
   \            6E67202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "P10 Finit ">`:
   \   000000   503130204669 DC8 "P10 Finit "
   \            6E69742000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   000000   00           DC8 ""

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Turning in">`:
   \   000000   5475726E696E DC8 "Turning in"
   \            6720696E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Searching ">`:
   \   000000   536561726368 DC8 "Searching "
   \            696E672000  
    304            
    305            
    306            
    307            
    308            
    309            
    310            
    311            
    312            
    313              //Backup Code 
    314            /*
    315            if(ADC_Left_Detector < ir_active_reading && ADC_Right_Detector > ir_active_reading)
    316            {
    317              left_pwm += 120;
    318              if(left_pwm > L_PWM_MAX)
    319              left_pwm = L_PWM_MAX;
    320              Left_Motor_ON_FORWARD(left_pwm);
    321              right_pwm -= 100;
    322              if(right_pwm < R_PWM_MIN)
    323              right_pwm = R_PWM_MIN;
    324              Right_Motor_ON_FORWARD(right_pwm);
    325            }
    326            else
    327            {
    328              right_pwm += 160;
    329              if(right_pwm > R_PWM_MAX)
    330              right_pwm = R_PWM_MAX;
    331              Right_Motor_ON_FORWARD(right_pwm);
    332              left_pwm -= 120;
    333              if(left_pwm < L_PWM_MIN)
    334              left_pwm = L_PWM_MIN;
    335              Left_Motor_ON_FORWARD(left_pwm);
    336            }
    337          */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Drive_Straight_Forward
        4   -> Left_Motor_ON_FORWARD
        0   -> Right_Motor_ON_FORWARD
      4   Init_PID
      4   Left_Motor_OFF
      4   Left_Motor_ON_FORWARD
      4   Left_Motor_ON_REVERSE
      4   Right_Motor_OFF
      4   Right_Motor_ON_FORWARD
      4   Right_Motor_ON_REVERSE
      4   Wheels_OFF
        4   -> Left_Motor_OFF
        0   -> Right_Motor_OFF
      4   drive_to_black_line
        4   -> LCD_print
        4   -> Left_Motor_ON_FORWARD
        4   -> Right_Motor_ON_FORWARD
        4   -> Wheels_OFF
      4   initialize_delay
      4   pid_udpate_left
        4   -> Left_Motor_ON_FORWARD
        0   -> Right_Motor_ON_FORWARD
        4   -> Right_Motor_ON_FORWARD
      6   turn
        6   -> LCD_print
        6   -> Left_Motor_ON_FORWARD
        6   -> Left_Motor_ON_REVERSE
        6   -> Right_Motor_ON_FORWARD
        6   -> Wheels_OFF
      4   update_instruction_label


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "  White   ">
      11  ?<Constant " Exiting  ">
       1  ?<Constant "">
      11  ?<Constant "P10 Finit ">
      11  ?<Constant "Searching ">
      11  ?<Constant "Turning in">
      14  Drive_Straight_Forward
       2  Init_PID
       1  LastDir
      20  Left_Motor_OFF
      28  Left_Motor_ON_FORWARD
      28  Left_Motor_ON_REVERSE
      20  Right_Motor_OFF
      28  Right_Motor_ON_FORWARD
      28  Right_Motor_ON_REVERSE
       8  Wheels_OFF
       2  _A_ADC12CTL0_L
       2  _A_ADC12IER0_L
       2  _A_TA0CCTL0_L
       2  _A_TA0CCTL1_L
       2  _A_TA0CCTL2_L
       2  _A_TB0CCR3_L
       2  _A_TB0CCR4_L
       2  _A_TB0CCR5_L
       2  _A_TB0CCR6_L
      94  drive_to_black_line
      12  initialize_delay
       1  instruction_label_tmp
      18  ld
       1  left_forward_flag
       2  left_pwm
       1  left_reverse_flag
     120  pid_udpate_left
      18  rd
       1  right_forward_flag
       2  right_pwm
       1  right_reverse_flag
     340  turn
      10  update_instruction_label

 
 752 bytes in segment CODE
  18 bytes in segment DATA16_AN
  56 bytes in segment DATA16_C
  46 bytes in segment DATA16_Z
 
 752 bytes of CODE  memory
  56 bytes of CONST memory
  46 bytes of DATA  memory (+ 18 bytes shared)

Errors: none
Warnings: none
