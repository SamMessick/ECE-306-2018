###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           24/Apr/2018  04:13:54
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\serial.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW6823.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\serial.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List\serial.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj\serial.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_09\serial.c
      1          //===============================================================
      2          //  File Name: serial.c
      3          //  Description: This file contains the Initialization and
      4          //                    interrupts for serial I/O
      5          //
      6          //  Author: Sam Messick
      7          //  Date Mar. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "serial.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x262
   \   union <unnamed> _A_PDOUT_L
   \                     _A_PDOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   union <unnamed> _A_TA0CCTL0_L
   \                     _A_TA0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c0
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c6
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c8
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ca
   \   union <unnamed> _A_UCA0STATW_L
   \                     _A_UCA0STATW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5cc
   \   union <unnamed> _A_UCA0RXBUF_L
   \                     _A_UCA0RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5da
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5dc
   \   union <unnamed> _A_UCA0IFG_L
   \                     _A_UCA0IFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5de
   \   union <unnamed> _A_UCA0IV_L
   \                     _A_UCA0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x620
   \   union <unnamed> _A_UCA3CTLW0_L
   \                     _A_UCA3CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x626
   \   union <unnamed> _A_UCA3BRW_L
   \                     _A_UCA3BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x628
   \   union <unnamed> _A_UCA3MCTLW_L
   \                     _A_UCA3MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62a
   \   union <unnamed> _A_UCA3STATW_L
   \                     _A_UCA3STATW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62c
   \   union <unnamed> _A_UCA3RXBUF_L
   \                     _A_UCA3RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62e
   \   union <unnamed> _A_UCA3TXBUF_L
   \                     _A_UCA3TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63a
   \   union <unnamed> _A_UCA3IE_L
   \                     _A_UCA3IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63c
   \   union <unnamed> _A_UCA3IFG_L
   \                     _A_UCA3IFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63e
   \   union <unnamed> _A_UCA3IV_L
   \                     _A_UCA3IV_L:
   \   000000                DS8 2
     12          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile uint8_t iot_tx_wr;                                   // IOT transmit buffer index
   \                     iot_tx_wr:
   \   000000                DS8 1

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile uint8_t iot_status_reg = SOFT_RESET;                 // Register for managing IOT flags
   \                     iot_status_reg:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for iot_status_reg>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          uint8_t main_ring_rd;
   \                     main_ring_rd:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          int8_t chars_to_read; 
   \                     chars_to_read:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          char IOT_Char_Rx[SMALL_RING_SIZE];
   \                     IOT_Char_Rx:
   \   000000                DS8 16

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     18          char IP_line1[COLUMN_NUM_COLUMNS] = "          ";
   \                     IP_line1:
   \   000000                DS8 11
   \   00000B                REQUIRE `?<Initializer for IP_line1>`

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     19          char IP_line2[COLUMN_NUM_COLUMNS] = "          ";
   \                     IP_line2:
   \   000000                DS8 11
   \   00000B                REQUIRE `?<Initializer for IP_line2>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          char Main_Char_Rx[SMALL_RING_SIZE];
   \                     Main_Char_Rx:
   \   000000                DS8 16

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     21          char* sock_init_command = "AT+S.SOCKD=32000\r\n";
   \                     sock_init_command:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for sock_init_command>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     22          char* sock_ping_command = "AT+S.PING=152.1.14.14\r\n";
   \                     sock_ping_command:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for sock_ping_command>`
     23          

   \                                 In  segment CODE, align 2
     24          void Init_Serial(void){
   \                     Init_Serial:
     25            Init_Serial_UCA0();
   \   000000   ........     CALLA   #Init_Serial_UCA0
     26            Init_Serial_UCA3();
   \   000004   ........     BRA     #Init_Serial_UCA3
     27          }
     28          

   \                                 In  segment CODE, align 2
     29          void Init_Serial_UCA0(void){
   \                     Init_Serial_UCA0:
     30            // Confiure UART 0
     31            UCA0CTLW0  = REGISTER_WORD_SIZE;    // Use word-size register (16-bit)
   \   000000   8243C005     MOV.W   #0x0, &0x5c0
     32            UCA0CTLW0 |= UCSSEL__SMCLK;         // Set SMCLK as frequency source
   \   000004   B2D08000C005 BIS.W   #0x80, &0x5c0
     33            UCA0CTLW0 |= UCSWRST;               // Set software reset enable
   \   00000A   92D3C005     BIS.W   #0x1, &0x5c0
     34            UCA0BRW    = UCA_BRW_115;           // ~115200 Baud
   \   00000E   A242C605     MOV.W   #0x4, &0x5c6
     35            UCA0MCTLW  = UCA_MCTL_115;
   \   000012   B2405155C805 MOV.W   #0x5551, &0x5c8
     36            UCA0CTL1  &= ~UCSWRST;              // Release from software reset
   \   000018   D2C3C005     BIC.B   #0x1, &0x5c0
     37            UCA0IE    |= UCRXIE;
   \   00001C   92D3DA05     BIS.W   #0x1, &0x5da
     38            UCA0IFG   &= ~(UCRXIFG);
   \   000020   92C3DC05     BIC.W   #0x1, &0x5dc
     39          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_UCA0CTLW0_L
   \   000026                REQUIRE _A_UCA0BRW_L
   \   000026                REQUIRE _A_UCA0MCTLW_L
   \   000026                REQUIRE _A_UCA0IE_L
   \   000026                REQUIRE _A_UCA0IFG_L
     40          

   \                                 In  segment CODE, align 2
     41          void Init_Serial_UCA3(void){
   \                     Init_Serial_UCA3:
     42            // Confiure UART 3
     43            UCA3CTLW0  = REGISTER_WORD_SIZE;    // Use word-size register (16-bit)
   \   000000   82432006     MOV.W   #0x0, &0x620
     44            UCA3CTLW0 |= UCSSEL__SMCLK;         // Set SMCLK as frequency source
   \   000004   B2D080002006 BIS.W   #0x80, &0x620
     45            UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \   00000A   92D32006     BIS.W   #0x1, &0x620
     46            UCA3BRW    = UCA_BRW_115;           // ~115200 Baud
   \   00000E   A2422606     MOV.W   #0x4, &0x626
     47            UCA3MCTLW  = UCA_MCTL_115;
   \   000012   B24051552806 MOV.W   #0x5551, &0x628
     48            UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   000018   D2C32006     BIC.B   #0x1, &0x620
     49            UCA3IE    |= UCRXIE;
   \   00001C   92D33A06     BIS.W   #0x1, &0x63a
     50            UCA3IFG   &= ~(UCRXIFG);
   \   000020   92C33C06     BIC.W   #0x1, &0x63c
     51          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_UCA3CTLW0_L
   \   000026                REQUIRE _A_UCA3BRW_L
   \   000026                REQUIRE _A_UCA3MCTLW_L
   \   000026                REQUIRE _A_UCA3IE_L
   \   000026                REQUIRE _A_UCA3IFG_L
     52          

   \                                 In  segment CODE, align 2
     53          void Init_IoT(void){
   \                     Init_IoT:
     54            
     55            Wheels_OFF();                        // Stop vehicle from unwanted movement
   \   000000   ........     CALLA   #Wheels_OFF
     56            P3IE      &= ~IOT_FACTORY;           // Begin reset hold
   \   000004   E2C23A02     BIC.B   #0x4, &0x23a
     57            P3OUT     &= ~IOT_RESET;
   \   000008   D2C32202     BIC.B   #0x1, &0x222
     58            IOT_ENABLE(SOFT_RESET);
   \   00000C   D2D3....     BIS.B   #0x1, &iot_status_reg
     59            delay_time =  IOT_RESET_TIME;
   \   000010   B240FA00.... MOV.W   #0xfa, &delay_time
     60            TA0CCTL0  |=  CCIE;
   \   000016   B2D010004203 BIS.W   #0x10, &0x342
     61            word1 = " Scanning ";
   \   00001C   B240........ MOV.W   #`?<Constant " Scanning ">`, &word1
     62            word2 = "          ";
   \   000022   B240........ MOV.W   #`?<Constant "          ">`, &word2
     63            word3 = "          ";
   \   000028   B240........ MOV.W   #`?<Constant "          ">`, &word3
     64            word4 = "          ";
   \   00002E   B240........ MOV.W   #`?<Constant "          ">`, &word4
     65            LCD_print(word1,word2,word3,word4);
   \   000034   1F42....     MOV.W   &word4, R15
   \   000038   1E42....     MOV.W   &word3, R14
   \   00003C   1D42....     MOV.W   &word2, R13
   \   000040   1C42....     MOV.W   &word1, R12
   \   000044   ........     CALLA   #LCD_print
     66            waiting = true;
   \   000048   D243....     MOV.B   #0x1, &waiting
     67            while(waiting);
   \                     ??Init_IoT_0:
   \   00004C   C293....     CMP.B   #0x0, &waiting
   \   000050   FD23         JNE     ??Init_IoT_0
     68            P3OUT     |=  IOT_RESET;             // Release reset hold -- wait for IoT connection initialization
   \   000052   D2D32202     BIS.B   #0x1, &0x222
     69            P3IE      |=  IOT_FACTORY;
   \   000056   E2D23A02     BIS.B   #0x4, &0x23a
     70            connection_lost = false;
   \   00005A   C243....     MOV.B   #0x0, &connection_lost
     71          }
   \   00005E   1001         RETA
   \   000060                REQUIRE _A_PBIE_L
   \   000060                REQUIRE _A_PBOUT_L
   \   000060                REQUIRE _A_TA0CCTL0_L
     72          

   \                                 In  segment CODE, align 2
     73          void transmit_charA3(char character){
   \                     transmit_charA3:
   \                     ??transmit_charA3_0:
     74            while (UCA3STATW & UCBUSY); // Transmit complete interrupt flag
   \   000000   92B32A06     BIT.W   #0x1, &0x62a
   \   000004   FD2F         JC      ??transmit_charA3_0
     75              UCA3TXBUF = character;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824C2E06     MOV.W   R12, &0x62e
     76          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_UCA3STATW_L
   \   00000E                REQUIRE _A_UCA3TXBUF_L
     77          

   \                                 In  segment CODE, align 2
     78          void transmit_charA0(char character){
   \                     transmit_charA0:
   \                     ??transmit_charA0_0:
     79            while (UCA0STATW & UCBUSY); // Transmit complete interrupt flag
   \   000000   92B3CA05     BIT.W   #0x1, &0x5ca
   \   000004   FD2F         JC      ??transmit_charA0_0
     80              UCA0TXBUF = character;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824CCE05     MOV.W   R12, &0x5ce
     81          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_UCA0STATW_L
   \   00000E                REQUIRE _A_UCA0TXBUF_L
     82          

   \                                 In  segment CODE, align 2
     83          void check_for_input(void){
   \                     check_for_input:
     84            static uint8_t string_index;
     85              if(IOT_STATUS(IP_READY))
   \   000000   E2B3....     BIT.B   #0x2, &iot_status_reg
   \   000004   5028         JNC     ??check_for_input_3
     86              {
     87                // Print out WiFi module IP address on lines 3 and 4 of LCD
     88                strncpy(IP_line1, IOT_Char_Rx + CHAR2, CHAR7);
   \   000006   3E400600     MOV.W   #0x6, R14
   \   00000A   3D40....     MOV.W   #IOT_Char_Rx + 1, R13
   \   00000E   3C40....     MOV.W   #IP_line1, R12
   \   000012   ........     CALLA   #strncpy
     89                strncpy(IP_line2, IOT_Char_Rx + CHAR9, CHAR7);
   \   000016   3E400600     MOV.W   #0x6, R14
   \   00001A   3D40....     MOV.W   #IOT_Char_Rx + 8, R13
   \   00001E   3C40....     MOV.W   #IP_line2, R12
   \   000022   ........     CALLA   #strncpy
     90                // Establish Socket connection
     91                for(string_index = BEGINNING; string_index < SOCKET_INIT_SIZE; string_index++)
   \   000026   C243....     MOV.B   #0x0, &??string_index
   \                     ??check_for_input_0:
   \   00002A   F2901200.... CMP.B   #0x12, &??string_index
   \   000030   0C2C         JC      ??check_for_input_4
     92                  transmit_charA3(sock_init_command[string_index]);
   \   000032   1E42....     MOV.W   &sock_init_command, R14
   \   000036   5F42....     MOV.B   &??string_index, R15
   \   00003A   4F4F         MOV.B   R15, R15
   \   00003C   0E5F         ADD.W   R15, R14
   \   00003E   6C4E         MOV.B   @R14, R12
   \   000040   ........     CALLA   #transmit_charA3
   \   000044   D253....     ADD.B   #0x1, &??string_index
   \   000048   F03F         JMP     ??check_for_input_0
     93                for(string_index = BEGINNING; string_index < SOCKET_PING_SIZE; string_index++)
   \                     ??check_for_input_4:
   \   00004A   C243....     MOV.B   #0x0, &??string_index
   \                     ??check_for_input_1:
   \   00004E   F2901600.... CMP.B   #0x16, &??string_index
   \   000054   0C2C         JC      ??check_for_input_5
     94                  transmit_charA3(sock_ping_command[string_index]);
   \   000056   1E42....     MOV.W   &sock_ping_command, R14
   \   00005A   5F42....     MOV.B   &??string_index, R15
   \   00005E   4F4F         MOV.B   R15, R15
   \   000060   0E5F         ADD.W   R15, R14
   \   000062   6C4E         MOV.B   @R14, R12
   \   000064   ........     CALLA   #transmit_charA3
   \   000068   D253....     ADD.B   #0x1, &??string_index
   \   00006C   F03F         JMP     ??check_for_input_1
     95                word1 = "   ncsu   ";
   \                     ??check_for_input_5:
   \   00006E   B240........ MOV.W   #`?<Constant "   ncsu   ">`, &word1
     96                word2 = "Port:32000";
   \   000074   B240........ MOV.W   #`?<Constant "Port:32000">`, &word2
     97                word3 = IP_line1;
   \   00007A   B240........ MOV.W   #IP_line1, &word3
     98                word4 = IP_line2;
   \   000080   B240........ MOV.W   #IP_line2, &word4
     99                LCD_print(word1,word2,word3,word4);
   \   000086   1F42....     MOV.W   &word4, R15
   \   00008A   1E42....     MOV.W   &word3, R14
   \   00008E   1D42....     MOV.W   &word2, R13
   \   000092   1C42....     MOV.W   &word1, R12
   \   000096   ........     CALLA   #LCD_print
    100                iot_tx_wr = BEGINNING;
   \   00009A   C243....     MOV.B   #0x0, &iot_tx_wr
    101                IOT_DISABLE(IP_READY);
   \   00009E   E2C3....     BIC.B   #0x2, &iot_status_reg
    102                IOT_DISABLE(SOFT_RESET);
   \   0000A2   D2C3....     BIC.B   #0x1, &iot_status_reg
    103              }
    104              if(IOT_STATUS(CHECK_FOR_COMMAND))
   \                     ??check_for_input_3:
   \   0000A6   E2B2....     BIT.B   #0x4, &iot_status_reg
   \   0000AA   1128         JNC     ??check_for_input_2
    105                if(Main_Char_Rx[CHAR1] == COMMAND_START)
   \   0000AC   F2902A00.... CMP.B   #0x2a, &Main_Char_Rx
   \   0000B2   0520         JNE     ??check_for_input_6
    106                {
    107                  parse_command();
   \   0000B4   ........     CALLA   #parse_command
    108                  IOT_DISABLE(CHECK_FOR_COMMAND);
   \   0000B8   E2C2....     BIC.B   #0x4, &iot_status_reg
   \   0000BC   083C         JMP     ??check_for_input_2
    109                }
    110                else if(Main_Char_Rx[CHAR1] == TEST_START)
   \                     ??check_for_input_6:
   \   0000BE   F2902E00.... CMP.B   #0x2e, &Main_Char_Rx
   \   0000C4   0420         JNE     ??check_for_input_2
    111                {
    112                  parse_test();
   \   0000C6   ........     CALLA   #parse_test
    113                  IOT_DISABLE(CHECK_FOR_COMMAND);
   \   0000CA   E2C2....     BIC.B   #0x4, &iot_status_reg
    114                }
    115              read_into_buffer();
   \                     ??check_for_input_2:
   \   0000CE   ........     BRA     #read_into_buffer
    116              //UCA3IE |= UCRXIE;
    117          }

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??string_index:
   \   000000                DS8 1
    118          
    119          // Updates main buffer alongside iot buffer

   \                                 In  segment CODE, align 2
    120          void read_into_buffer(void){
   \                     read_into_buffer:
   \                     ??read_into_buffer_0:
    121            static uint8_t rx_wr_temp;
    122            while(rx_wr_temp != iot_tx_wr)
   \   000000   D292........ CMP.B   &iot_tx_wr, &??rx_wr_temp
   \   000006   0424         JEQ     ??read_into_buffer_1
    123              rx_wr_temp = iot_tx_wr;
   \   000008   D242........ MOV.B   &iot_tx_wr, &??rx_wr_temp
   \   00000E   F83F         JMP     ??read_into_buffer_0
    124            while(main_ring_rd != rx_wr_temp/* || chars_to_read > COUNTER_RESET*/)
   \                     ??read_into_buffer_1:
   \   000010   D292........ CMP.B   &??rx_wr_temp, &main_ring_rd
   \   000016   1C24         JEQ     ??read_into_buffer_2
    125            {
    126              Main_Char_Rx[main_ring_rd] = IOT_Char_Rx[main_ring_rd];
   \   000018   5E42....     MOV.B   &main_ring_rd, R14
   \   00001C   4E4E         MOV.B   R14, R14
   \   00001E   5F42....     MOV.B   &main_ring_rd, R15
   \   000022   4F4F         MOV.B   R15, R15
   \   000024   DF4E........ MOV.B   IOT_Char_Rx(R14), Main_Char_Rx(R15)
    127              chars_to_read--;
   \   00002A   F253....     ADD.B   #0xff, &chars_to_read
    128              if(Main_Char_Rx[main_ring_rd] == '\n' || ++main_ring_rd >= SMALL_RING_SIZE)
   \   00002E   5F42....     MOV.B   &main_ring_rd, R15
   \   000032   4F4F         MOV.B   R15, R15
   \   000034   FF900A00.... CMP.B   #0xa, Main_Char_Rx(R15)
   \   00003A   0624         JEQ     ??read_into_buffer_3
   \   00003C   D253....     ADD.B   #0x1, &main_ring_rd
   \   000040   F2901000.... CMP.B   #0x10, &main_ring_rd
   \   000046   E42B         JNC     ??read_into_buffer_1
    129              {
    130                main_ring_rd = BEGINNING;
   \                     ??read_into_buffer_3:
   \   000048   C243....     MOV.B   #0x0, &main_ring_rd
    131                IOT_ENABLE(CHECK_FOR_COMMAND);
   \   00004C   E2D2....     BIS.B   #0x4, &iot_status_reg
    132                break;
    133              }
    134            }
    135          }
   \                     ??read_into_buffer_2:
   \   000050   1001         RETA

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??rx_wr_temp:
   \   000000                DS8 1
    136          

   \                                 In  segment CODE, align 2
    137          void parse_command(void){
   \                     parse_command:
   \   000000   3B15         PUSHM.W #0x4, R11
    138            static char left_direction;
    139            static char right_direction;
    140            static uint8_t left_pwm;
    141            static uint8_t right_pwm;
    142            
    143            uint16_t password_attempt;   // Number between 0000-9999 validating user
    144            char command_identifier;
    145            
    146            password_attempt = (Main_Char_Rx[CHAR2] - ASCII_NUM_SHIFT)*THOUSAND +
    147                               (Main_Char_Rx[CHAR3] - ASCII_NUM_SHIFT)*HUNDRED  +
    148                               (Main_Char_Rx[CHAR4] - ASCII_NUM_SHIFT)*TEN      +
    149                               (Main_Char_Rx[CHAR5] - ASCII_NUM_SHIFT);
   \   000002   5E42....     MOV.B   &Main_Char_Rx + 1, R14
   \   000006   4E4E         MOV.B   R14, R14
   \   000008   5E0A         RLAM.W  #0x3, R14
   \   00000A   0F4E         MOV.W   R14, R15
   \   00000C   5E06         RLAM.W  #0x2, R14
   \   00000E   0F5E         ADD.W   R14, R15
   \   000010   0E5E         RLA.W   R14
   \   000012   0F5E         ADD.W   R14, R15
   \   000014   0E5E         RLA.W   R14
   \   000016   0F5E         ADD.W   R14, R15
   \   000018   0E5E         RLA.W   R14
   \   00001A   0F5E         ADD.W   R14, R15
   \   00001C   0E5E         RLA.W   R14
   \   00001E   0E5F         ADD.W   R15, R14
   \   000020   5F42....     MOV.B   &Main_Char_Rx + 2, R15
   \   000024   4F4F         MOV.B   R15, R15
   \   000026   5F06         RLAM.W  #0x2, R15
   \   000028   0D4F         MOV.W   R15, R13
   \   00002A   5F0A         RLAM.W  #0x3, R15
   \   00002C   0D5F         ADD.W   R15, R13
   \   00002E   0F5F         RLA.W   R15
   \   000030   0F5D         ADD.W   R13, R15
   \   000032   0E5F         ADD.W   R15, R14
   \   000034   5F42....     MOV.B   &Main_Char_Rx + 3, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A                RPT     #0xa
   \   00003A   49180E5F     ADDX.W  R15, R14
   \   00003E   5F42....     MOV.B   &Main_Char_Rx + 4, R15
   \   000042   4F4F         MOV.B   R15, R15
   \   000044   0E5F         ADD.W   R15, R14
   \   000046   3E50B02F     ADD.W   #0x2fb0, R14
   \   00004A   0B4E         MOV.W   R14, R11
    150            
    151            if(password_attempt == COMMAND_PASS)
   \   00004C   3B90D121     CMP.W   #0x21d1, R11
   \   000050   0F21         JNE     ??parse_command_1
    152            {
    153              command_identifier = Main_Char_Rx[CHAR6];
   \   000052   5842....     MOV.B   &Main_Char_Rx + 5, R8
    154              switch(command_identifier)
   \   000056   4E48         MOV.B   R8, R14
   \   000058   7E804100     SUB.B   #0x41, R14
   \   00005C   A924         JEQ     ??parse_command_3
   \   00005E   5E83         SUB.B   #0x1, R14
   \   000060   BE24         JEQ     ??parse_command_4
   \   000062   7E800900     SUB.B   #0x9, R14
   \   000066   0A24         JEQ     ??parse_command_5
   \   000068   5E83         SUB.B   #0x1, R14
   \   00006A   FE24         JEQ     ??parse_command_6
   \   00006C   5E83         SUB.B   #0x1, R14
   \   00006E   0624         JEQ     ??parse_command_5
   \   000070   7E800B00     SUB.B   #0xb, R14
   \   000074   E224         JEQ     ??parse_command_7
   \   000076   5E83         SUB.B   #0x1, R14
   \   000078   C924         JEQ     ??parse_command_8
   \   00007A   FA3C         JMP     ??parse_command_1
    155              {
    156              case LEFT_FORWARD:
    157              case LEFT_REVERSE:                    // A PWM value was specified
    158                
    159                // Retrieve PWM values
    160                left_direction = Main_Char_Rx[CHAR6];
   \                     ??parse_command_5:
   \   00007C   D242........ MOV.B   &Main_Char_Rx + 5, &??left_direction
    161                right_direction = Main_Char_Rx[CHAR7];
   \   000082   D242........ MOV.B   &Main_Char_Rx + 6, &??right_direction
    162                
    163                left_pwm =     (Main_Char_Rx[CHAR8] - ASCII_NUM_SHIFT)*HUNDRED  +
    164                               (Main_Char_Rx[CHAR9] - ASCII_NUM_SHIFT)*TEN      +
    165                               (Main_Char_Rx[CHAR10] - ASCII_NUM_SHIFT);
   \   000088   5E42....     MOV.B   &Main_Char_Rx + 7, R14
   \   00008C                RPT     #0x2
   \   00008C   41184E5E     RLAX.B  R14
   \   000090   4F4E         MOV.B   R14, R15
   \   000092                RPT     #0x3
   \   000092   42184E5E     RLAX.B  R14
   \   000096   4F5E         ADD.B   R14, R15
   \   000098   4E5E         RLA.B   R14
   \   00009A   4E5F         ADD.B   R15, R14
   \   00009C   5F42....     MOV.B   &Main_Char_Rx + 8, R15
   \   0000A0                RPT     #0xa
   \   0000A0   49184E5F     ADDX.B  R15, R14
   \   0000A4   5E52....     ADD.B   &Main_Char_Rx + 9, R14
   \   0000A8   7E503000     ADD.B   #0x30, R14
   \   0000AC   C24E....     MOV.B   R14, &??left_pwm
    166                right_pwm =    (Main_Char_Rx[CHAR11] - ASCII_NUM_SHIFT)*HUNDRED  +
    167                               (Main_Char_Rx[CHAR12] - ASCII_NUM_SHIFT)*TEN      +
    168                               (Main_Char_Rx[CHAR13] - ASCII_NUM_SHIFT);
   \   0000B0   5E42....     MOV.B   &Main_Char_Rx + 10, R14
   \   0000B4                RPT     #0x2
   \   0000B4   41184E5E     RLAX.B  R14
   \   0000B8   4F4E         MOV.B   R14, R15
   \   0000BA                RPT     #0x3
   \   0000BA   42184E5E     RLAX.B  R14
   \   0000BE   4F5E         ADD.B   R14, R15
   \   0000C0   4E5E         RLA.B   R14
   \   0000C2   4E5F         ADD.B   R15, R14
   \   0000C4   5F42....     MOV.B   &Main_Char_Rx + 11, R15
   \   0000C8                RPT     #0xa
   \   0000C8   49184E5F     ADDX.B  R15, R14
   \   0000CC   5E52....     ADD.B   &Main_Char_Rx + 12, R14
   \   0000D0   7E503000     ADD.B   #0x30, R14
   \   0000D4   C24E....     MOV.B   R14, &??right_pwm
    169                
    170                left_pwm  %= MAX_PWM;     // Bring pwm values within range
   \   0000D8   3A40FF00     MOV.W   #0xff, R10
   \   0000DC   5C42....     MOV.B   &??left_pwm, R12
   \   0000E0   4C4C         MOV.B   R12, R12
   \   0000E2   0E4A         MOV.W   R10, R14
   \   0000E4   ........     CALLA   #?DivMod16s
   \   0000E8   0212         PUSH.W  SR
   \   0000EA   32C2         DINT
   \   0000EC   0343         NOP
   \   0000EE   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   0000F2   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   0000F6   D282........ SUB.B   &__iar_HWMUL + 10, &??left_pwm // RESLO
   \   0000FC   0343         NOP
   \   0000FE   3241         POP.W   SR
    171                right_pwm %= MAX_PWM; 
   \   000100   3A40FF00     MOV.W   #0xff, R10
   \   000104   5C42....     MOV.B   &??right_pwm, R12
   \   000108   4C4C         MOV.B   R12, R12
   \   00010A   0E4A         MOV.W   R10, R14
   \   00010C   ........     CALLA   #?DivMod16s
   \   000110   0212         PUSH.W  SR
   \   000112   32C2         DINT
   \   000114   0343         NOP
   \   000116   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   00011A   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   00011E   D282........ SUB.B   &__iar_HWMUL + 10, &??right_pwm // RESLO
   \   000124   0343         NOP
   \   000126   3241         POP.W   SR
    172                
    173                // Determine PWM direction
    174                switch(left_direction)
   \   000128   5E42....     MOV.B   &??left_direction, R14
   \   00012C   7E804B00     SUB.B   #0x4b, R14
   \   000130   0324         JEQ     ??parse_command_9
   \   000132   6E83         SUB.B   #0x2, R14
   \   000134   1F24         JEQ     ??parse_command_10
   \   000136   9C3C         JMP     ??parse_command_1
    175                {
    176                case LEFT_FORWARD:
    177                  switch(right_direction)
   \                     ??parse_command_9:
   \   000138   5E42....     MOV.B   &??right_direction, R14
   \   00013C   7E805100     SUB.B   #0x51, R14
   \   000140   0324         JEQ     ??parse_command_11
   \   000142   6E83         SUB.B   #0x2, R14
   \   000144   0C24         JEQ     ??parse_command_12
   \   000146   943C         JMP     ??parse_command_1
    178                  {
    179                  case RIGHT_FORWARD:
    180                    Wheels_OFF();
   \                     ??parse_command_11:
   \   000148   ........     CALLA   #Wheels_OFF
    181                    Left_Motor_ON_FORWARD(left_pwm);
   \   00014C   5C42....     MOV.B   &??left_pwm, R12
   \   000150   ........     CALLA   #Left_Motor_ON_FORWARD
    182                    Right_Motor_ON_FORWARD(right_pwm);
   \   000154   5C42....     MOV.B   &??right_pwm, R12
   \   000158   ........     CALLA   #Right_Motor_ON_FORWARD
    183                    break;
   \   00015C   893C         JMP     ??parse_command_1
    184                    
    185                  case RIGHT_REVERSE:
    186                    Wheels_OFF();
   \                     ??parse_command_12:
   \   00015E   ........     CALLA   #Wheels_OFF
    187                    Left_Motor_ON_FORWARD(left_pwm);
   \   000162   5C42....     MOV.B   &??left_pwm, R12
   \   000166   ........     CALLA   #Left_Motor_ON_FORWARD
    188                    Right_Motor_ON_REVERSE(right_pwm);
   \   00016A   5C42....     MOV.B   &??right_pwm, R12
   \   00016E   ........     CALLA   #Right_Motor_ON_REVERSE
    189                  }break;
   \   000172   7E3C         JMP     ??parse_command_1
    190                  
    191                case LEFT_REVERSE:
    192                  switch(right_direction)
   \                     ??parse_command_10:
   \   000174   5E42....     MOV.B   &??right_direction, R14
   \   000178   7E805100     SUB.B   #0x51, R14
   \   00017C   0324         JEQ     ??parse_command_13
   \   00017E   6E83         SUB.B   #0x2, R14
   \   000180   0C24         JEQ     ??parse_command_14
   \   000182   763C         JMP     ??parse_command_1
    193                  {
    194                  case RIGHT_FORWARD:
    195                    Wheels_OFF();
   \                     ??parse_command_13:
   \   000184   ........     CALLA   #Wheels_OFF
    196                    Left_Motor_ON_REVERSE(left_pwm);
   \   000188   5C42....     MOV.B   &??left_pwm, R12
   \   00018C   ........     CALLA   #Left_Motor_ON_REVERSE
    197                    Right_Motor_ON_FORWARD(right_pwm);
   \   000190   5C42....     MOV.B   &??right_pwm, R12
   \   000194   ........     CALLA   #Right_Motor_ON_FORWARD
    198                    break;
   \   000198   6B3C         JMP     ??parse_command_1
    199                    
    200                  case RIGHT_REVERSE:
    201                    Wheels_OFF();
   \                     ??parse_command_14:
   \   00019A   ........     CALLA   #Wheels_OFF
    202                    Left_Motor_ON_REVERSE(left_pwm);
   \   00019E   5C42....     MOV.B   &??left_pwm, R12
   \   0001A2   ........     CALLA   #Left_Motor_ON_REVERSE
    203                    Right_Motor_ON_REVERSE(right_pwm);
   \   0001A6   5C42....     MOV.B   &??right_pwm, R12
   \   0001AA   ........     CALLA   #Right_Motor_ON_REVERSE
    204                  }
    205                } break;
   \   0001AE   603C         JMP     ??parse_command_1
    206                
    207              case EMOTE1:                         // Print Samic fast meme to LCD
    208                word1 = " Gotta go ";
   \                     ??parse_command_3:
   \   0001B0   B240........ MOV.W   #`?<Constant " Gotta go ">`, &word1
    209                word2 = "<<<<<<<<<<";
   \   0001B6   B240........ MOV.W   #`?<Constant "<<<<<<<<<<">`, &word2
    210                word3 = "Samic fast";
   \   0001BC   B240........ MOV.W   #`?<Constant "Samic fast">`, &word3
    211                word4 = ">>>>>>>>>>";
   \   0001C2   B240........ MOV.W   #`?<Constant ">>>>>>>>>>">`, &word4
    212                LCD_print(word1,word2,word3,word4);
   \   0001C8   1F42....     MOV.W   &word4, R15
   \   0001CC   1E42....     MOV.W   &word3, R14
   \   0001D0   1D42....     MOV.W   &word2, R13
   \   0001D4   1C42....     MOV.W   &word1, R12
   \   0001D8   ........     CALLA   #LCD_print
    213                break;
   \   0001DC   493C         JMP     ??parse_command_1
    214                
    215              case EMOTE2:                         // Print Happy Car meme to LCD
    216                word1 = "I'm afraid";
   \                     ??parse_command_4:
   \   0001DE   B240........ MOV.W   #`?<Constant "I\\'m afraid">`, &word1
    217                word2 = "I can't do";
   \   0001E4   B240........ MOV.W   #`?<Constant "I can\\'t do">`, &word2
    218                word3 = "that Dave.";
   \   0001EA   B240........ MOV.W   #`?<Constant "that Dave.">`, &word3
    219                word4 = "  o___o!  ";
   \   0001F0   B240........ MOV.W   #`?<Constant "  o___o!  ">`, &word4
    220                LCD_print(word1,word2,word3,word4);
   \   0001F6   1F42....     MOV.W   &word4, R15
   \   0001FA   1E42....     MOV.W   &word3, R14
   \   0001FE   1D42....     MOV.W   &word2, R13
   \   000202   1C42....     MOV.W   &word1, R12
   \   000206   ........     CALLA   #LCD_print
    221                break;
   \   00020A   323C         JMP     ??parse_command_1
    222                
    223              case EMOTE3:                         // Print Dank Memes ad to LCD
    224                word1 = " I am the ";
   \                     ??parse_command_8:
   \   00020C   B240........ MOV.W   #`?<Constant " I am the ">`, &word1
    225                word2 = "MSP430  JR";
   \   000212   B240........ MOV.W   #`?<Constant "MSP430  JR">`, &word2
    226                word3 = "----------";
   \   000218   B240........ MOV.W   #`?<Constant "----------">`, &word3
    227                word4 = "Wazzup? :)";
   \   00021E   B240........ MOV.W   #`?<Constant "Wazzup? :)">`, &word4
    228                LCD_print(word1,word2,word3,word4);
   \   000224   1F42....     MOV.W   &word4, R15
   \   000228   1E42....     MOV.W   &word3, R14
   \   00022C   1D42....     MOV.W   &word2, R13
   \   000230   1C42....     MOV.W   &word1, R12
   \   000234   ........     CALLA   #LCD_print
    229                break;
   \   000238   1B3C         JMP     ??parse_command_1
    230                
    231              case EMOTE4:                         // Print cautionary meme to LCD
    232                word1 = "Sometimes,";
   \                     ??parse_command_7:
   \   00023A   B240........ MOV.W   #`?<Constant "Sometimes,">`, &word1
    233                word2 = " I dream  ";
   \   000240   B240........ MOV.W   #`?<Constant " I dream  ">`, &word2
    234                word3 = "  about   ";
   \   000246   B240........ MOV.W   #`?<Constant "  about   ">`, &word3
    235                word4 = " cheese...";
   \   00024C   B240........ MOV.W   #`?<Constant " cheese...">`, &word4
    236                LCD_print(word1,word2,word3,word4);
   \   000252   1F42....     MOV.W   &word4, R15
   \   000256   1E42....     MOV.W   &word3, R14
   \   00025A   1D42....     MOV.W   &word2, R13
   \   00025E   1C42....     MOV.W   &word1, R12
   \   000262   ........     CALLA   #LCD_print
    237                break;
   \   000266   043C         JMP     ??parse_command_1
    238                
    239              case BLACK_LINE_MODE:
    240                P5OUT &= ~IOT_RESET;   // Disable IOT device
   \                     ??parse_command_6:
   \   000268   D2C34202     BIC.B   #0x1, &0x242
    241                P8OUT |= IR_LED;       // Enable infrared LED for sensor readings
   \   00026C   D2D36302     BIS.B   #0x1, &0x263
    242                
    243                /* Goal of code: drive in large circle, disabling white detection for 5 seconds
    244                 *               enable white detection
    245                 *               if white found, enable black detection
    246                 *               if black found, stop, turn, follow black line
    247                 *               after 20 seconds, turn car out of loop
    248                 *               drive forward for 4 seconds and stop (display meme)
    249                 */
    250              }
    251            }
    252          }
   \                     ??parse_command_1:
   \   000270   3817         POPM.W  #0x4, R11
   \   000272   1001         RETA
   \   000274                REQUIRE _A_PCOUT_L
   \   000274                REQUIRE _A_PDOUT_L

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??left_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??right_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??left_pwm:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??right_pwm:
   \   000000                DS8 1
    253          

   \                                 In  segment CODE, align 2
    254          void parse_test(void){
   \                     parse_test:
    255            uint8_t string_index;
    256            static char* higher_baud = "460800\r\n";
    257            static char* lower_baud  = "115200\r\n";
    258            
    259            switch(Main_Char_Rx[CHAR2])
   \   000000   5F42....     MOV.B   &Main_Char_Rx + 1, R15
   \   000004   7F804600     SUB.B   #0x46, R15
   \   000008   1A24         JEQ     ??parse_test_5
   \   00000A   7F800D00     SUB.B   #0xd, R15
   \   00000E   2F20         JNE     ??parse_test_2
    260            {
    261            case 'S': // 115200 baud
    262              UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \   000010   92D32006     BIS.W   #0x1, &0x620
    263              UCA3BRW = UCA_BRW_115;
   \   000014   A2422606     MOV.W   #0x4, &0x626
    264              UCA3MCTLW  = UCA_MCTL_115;
   \   000018   B24051552806 MOV.W   #0x5551, &0x628
    265              UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   00001E   D2C32006     BIC.B   #0x1, &0x620
    266              UCA3IE    |= UCRXIE;
   \   000022   92D33A06     BIS.W   #0x1, &0x63a
    267              for(string_index = BEGINNING; string_index < BAUD_WORD_SIZE; string_index++)
   \   000026   4E43         MOV.B   #0x0, R14
   \                     ??parse_test_0:
   \   000028   7E92         CMP.B   #0x8, R14
   \   00002A   212C         JC      ??parse_test_2
    268                transmit_charA0(lower_baud[string_index]);
   \   00002C   1F42....     MOV.W   &??lower_baud, R15
   \   000030   4E4E         MOV.B   R14, R14
   \   000032   0F5E         ADD.W   R14, R15
   \   000034   6C4F         MOV.B   @R15, R12
   \   000036   ........     CALLA   #transmit_charA0
   \   00003A   5E53         ADD.B   #0x1, R14
   \   00003C   F53F         JMP     ??parse_test_0
    269              break;
    270            case 'F': // 460800 baud
    271              UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \                     ??parse_test_5:
   \   00003E   92D32006     BIS.W   #0x1, &0x620
    272              UCA3BRW = UCA_BRW_460;
   \   000042   B24011002606 MOV.W   #0x11, &0x626
    273              UCA3MCTLW = UCA_MCTL_460;
   \   000048   B240104A2806 MOV.W   #0x4a10, &0x628
    274              UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   00004E   D2C32006     BIC.B   #0x1, &0x620
    275              UCA3IE    |= UCRXIE;
   \   000052   92D33A06     BIS.W   #0x1, &0x63a
    276              for(string_index = BEGINNING; string_index < BAUD_WORD_SIZE; string_index++)
   \   000056   4E43         MOV.B   #0x0, R14
   \                     ??parse_test_1:
   \   000058   7E92         CMP.B   #0x8, R14
   \   00005A   092C         JC      ??parse_test_2
    277                transmit_charA0(higher_baud[string_index]);
   \   00005C   1F42....     MOV.W   &??higher_baud, R15
   \   000060   4E4E         MOV.B   R14, R14
   \   000062   0F5E         ADD.W   R14, R15
   \   000064   6C4F         MOV.B   @R15, R12
   \   000066   ........     CALLA   #transmit_charA0
   \   00006A   5E53         ADD.B   #0x1, R14
   \   00006C   F53F         JMP     ??parse_test_1
    278            }
    279          }
   \                     ??parse_test_2:
   \   00006E   1001         RETA
   \   000070                REQUIRE _A_UCA3CTLW0_L
   \   000070                REQUIRE _A_UCA3BRW_L
   \   000070                REQUIRE _A_UCA3MCTLW_L
   \   000070                REQUIRE _A_UCA3IE_L

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     ??higher_baud:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for higher_baud>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     ??lower_baud:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for lower_baud>`
    280          
    281          #pragma vector = USCI_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    282          __interrupt void USCI_A0_ISR(void){
   \                     USCI_A0_ISR:
   \   000000   0F12         PUSH.W  R15
    283            switch(__even_in_range(UCA0IV, eight))
   \   000002   1F42DE05     MOV.W   &0x5de, R15
   \   000006   2F93         CMP.W   #0x2, R15
   \   000008   0920         JNE     ??USCI_A0_ISR_1
    284            {
    285            case RXIFG:
    286              if(UCA0RXBUF == '\0')
   \   00000A   8293CC05     CMP.W   #0x0, &0x5cc
   \   00000E   0624         JEQ     ??USCI_A0_ISR_1
    287                break;
    288              // Transmit received character to IOT Module
    289              while(UCA3STATW & UCBUSY);
   \                     ??USCI_A0_ISR_0:
   \   000010   92B32A06     BIT.W   #0x1, &0x62a
   \   000014   FD2F         JC      ??USCI_A0_ISR_0
    290              UCA3TXBUF = UCA0RXBUF;
   \   000016   9242CC052E06 MOV.W   &0x5cc, &0x62e
    291            }
    292          }
   \                     ??USCI_A0_ISR_1:
   \   00001C   3F41         POP.W   R15
   \   00001E   0013         RETI
   \   000020                REQUIRE _A_UCA0RXBUF_L
   \   000020                REQUIRE _A_UCA3STATW_L
   \   000020                REQUIRE _A_UCA3TXBUF_L
   \   000020                REQUIRE _A_UCA0IV_L
    293          
    294          #pragma vector = USCI_A3_VECTOR

   \                                 In  segment ISR_CODE, align 2
    295          __interrupt void USCI_A3_ISR(void){
   \                     USCI_A3_ISR:
   \   000000   5F15         PUSHM.W #0x6, R15
    296            uint8_t temp;
    297            switch(__even_in_range(UCA3IV, eight))
   \   000002   1F423E06     MOV.W   &0x63e, R15
   \   000006   2F93         CMP.W   #0x2, R15
   \   000008   3C20         JNE     ??USCI_A3_ISR_0
    298            {
    299            case RXIFG:
    300              //while(UCA0STATW & UCBUSY);
    301              UCA0TXBUF = UCA3RXBUF;             // Echo character to USB
   \   00000A   92422C06CE05 MOV.W   &0x62c, &0x5ce
    302              
    303              chars_to_read++;
   \   000010   D253....     ADD.B   #0x1, &chars_to_read
    304              
    305              chars_to_read %= DOUBLE_COMMAND_LENGTH;
   \   000014   3A401800     MOV.W   #0x18, R10
   \   000018   5C42....     MOV.B   &chars_to_read, R12
   \   00001C   8C11         SXT     R12
   \   00001E   3CF3         AND.W   #0xffff, R12
   \   000020   0E4A         MOV.W   R10, R14
   \   000022   ........     CALLA   #?DivMod16s
   \   000026   0212         PUSH.W  SR
   \   000028   32C2         DINT
   \   00002A   0343         NOP
   \   00002C   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   000030   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   000034   D282........ SUB.B   &__iar_HWMUL + 10, &chars_to_read // RESLO
   \   00003A   0343         NOP
   \   00003C   3241         POP.W   SR
    306              temp = iot_tx_wr;
   \   00003E   5B42....     MOV.B   &iot_tx_wr, R11
    307              IOT_Char_Rx[temp] = UCA3RXBUF;     // Read character into interrupt buffer
   \   000042   1E422C06     MOV.W   &0x62c, R14
   \   000046   4B4B         MOV.B   R11, R11
   \   000048   CB4E....     MOV.B   R14, IOT_Char_Rx(R11)
    308              
    309              if(++iot_tx_wr >= SMALL_RING_SIZE || UCA3RXBUF == '\n')
   \   00004C   5E42....     MOV.B   &iot_tx_wr, R14
   \   000050   5E53         ADD.B   #0x1, R14
   \   000052   C24E....     MOV.B   R14, &iot_tx_wr
   \   000056   7E901000     CMP.B   #0x10, R14
   \   00005A   042C         JC      ??USCI_A3_ISR_1
   \   00005C   B2900A002C06 CMP.W   #0xa, &0x62c
   \   000062   0F20         JNE     ??USCI_A3_ISR_0
    310              {
    311                // Reset interrupt buffer index if end reached
    312                iot_tx_wr = BEGINNING;
   \                     ??USCI_A3_ISR_1:
   \   000064   C243....     MOV.B   #0x0, &iot_tx_wr
    313                
    314                if(IOT_Char_Rx[CHAR1] == ':' &&
    315                   IOT_Char_Rx[CHAR2] == IP_LEAD_BYTE &&
    316                   IOT_STATUS(SOFT_RESET))
   \   000068   F2903A00.... CMP.B   #0x3a, &IOT_Char_Rx
   \   00006E   0920         JNE     ??USCI_A3_ISR_0
   \   000070   F2903100.... CMP.B   #0x31, &IOT_Char_Rx + 1
   \   000076   0520         JNE     ??USCI_A3_ISR_0
   \   000078   D2B3....     BIT.B   #0x1, &iot_status_reg
   \   00007C   0228         JNC     ??USCI_A3_ISR_0
    317                {
    318                  IOT_ENABLE(IP_READY);               // Notify main that IP address is received
   \   00007E   E2D3....     BIS.B   #0x2, &iot_status_reg
    319                }
    320              }
    321              break;
    322            }
    323          }
   \                     ??USCI_A3_ISR_0:
   \   000082   5A17         POPM.W  #0x6, R15
   \   000084   0013         RETI
   \   000086                REQUIRE _A_UCA0TXBUF_L
   \   000086                REQUIRE _A_UCA3RXBUF_L
   \   000086                REQUIRE _A_UCA3IV_L

   \                                 In  segment INTVEC, offset 0x30, root
   \                     `??USCI_A3_ISR::??INTVEC 48`:
   \   000030   ....         DC16    USCI_A3_ISR

   \                                 In  segment INTVEC, offset 0x60, root
   \                     `??USCI_A0_ISR::??INTVEC 96`:
   \   000060   ....         DC16    USCI_A0_ISR

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for iot_status_reg>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for IP_line1>`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for IP_line2>`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for sock_init_command>`:
   \   000000   ....         DC16 `?<Constant "AT+S.SOCKD=32000\\r\\n">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for sock_ping_command>`:
   \   000000   ....         DC16 `?<Constant "AT+S.PING=152.1.14.14\\r\\n">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for higher_baud>`:
   \   000000   ....         DC16 `?<Constant "460800\\r\\n">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for lower_baud>`:
   \   000000   ....         DC16 `?<Constant "115200\\r\\n">`

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.SOCKD=32000\\r\\n">`:
   \   000000   41542B532E53 DC8 "AT+S.SOCKD=32000\015\012"
   \            4F434B443D33
   \            323030300D0A
   \            00          

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "AT+S.PING=152.1.14.14\\r\\n">`:
   \   000000   41542B532E50 DC8 "AT+S.PING=152.1.14.14\015\012"
   \            494E473D3135
   \            322E312E3134
   \            2E31340D0A00

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Scanning ">`:
   \   000000   205363616E6E DC8 " Scanning "
   \            696E672000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   ncsu   ">`:
   \   000000   2020206E6373 DC8 "   ncsu   "
   \            7520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Port:32000">`:
   \   000000   506F72743A33 DC8 "Port:32000"
   \            3230303000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Gotta go ">`:
   \   000000   20476F747461 DC8 " Gotta go "
   \            20676F2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "<<<<<<<<<<">`:
   \   000000   3C3C3C3C3C3C DC8 "<<<<<<<<<<"
   \            3C3C3C3C00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Samic fast">`:
   \   000000   53616D696320 DC8 "Samic fast"
   \            6661737400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant ">>>>>>>>>>">`:
   \   000000   3E3E3E3E3E3E DC8 ">>>>>>>>>>"
   \            3E3E3E3E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "I\\'m afraid">`:
   \   000000   49276D206166 DC8 "I'm afraid"
   \            7261696400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "I can\\'t do">`:
   \   000000   492063616E27 DC8 "I can't do"
   \            7420646F00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "that Dave.">`:
   \   000000   746861742044 DC8 "that Dave."
   \            6176652E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  o___o!  ">`:
   \   000000   20206F5F5F5F DC8 "  o___o!  "
   \            6F21202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " I am the ">`:
   \   000000   204920616D20 DC8 " I am the "
   \            7468652000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "MSP430  JR">`:
   \   000000   4D5350343330 DC8 "MSP430  JR"
   \            20204A5200  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Wazzup? :)">`:
   \   000000   57617A7A7570 DC8 "Wazzup? :)"
   \            3F203A2900  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Sometimes,">`:
   \   000000   536F6D657469 DC8 "Sometimes,"
   \            6D65732C00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " I dream  ">`:
   \   000000   204920647265 DC8 " I dream  "
   \            616D202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  about   ">`:
   \   000000   202061626F75 DC8 "  about   "
   \            7420202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " cheese...">`:
   \   000000   206368656573 DC8 " cheese..."
   \            652E2E2E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "460800\\r\\n">`:
   \   000000   343630383030 DC8 "460800\015\012"
   \            0D0A00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "115200\\r\\n">`:
   \   000000   313135323030 DC8 "115200\015\012"
   \            0D0A00      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_IoT
        4   -> LCD_print
        4   -> Wheels_OFF
      4   Init_Serial
        4   -> Init_Serial_UCA0
        0   -> Init_Serial_UCA3
      4   Init_Serial_UCA0
      4   Init_Serial_UCA3
      6   USCI_A0_ISR
     18   USCI_A3_ISR
       16 ?DivMod16s
      4   check_for_input
        4   -> LCD_print
        4   -> parse_command
        4   -> parse_test
        0   -> read_into_buffer
        4   -> strncpy
        4   -> transmit_charA3
     14   parse_command
       12   -> LCD_print
       12   -> Left_Motor_ON_FORWARD
       12   -> Left_Motor_ON_REVERSE
       12   -> Right_Motor_ON_FORWARD
       12   -> Right_Motor_ON_REVERSE
       12   -> Wheels_OFF
       12 ?DivMod16s
      4   parse_test
        4   -> transmit_charA0
      4   read_into_buffer
      4   transmit_charA0
      4   transmit_charA3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   ncsu   ">
      11  ?<Constant "  about   ">
      11  ?<Constant "  o___o!  ">
      11  ?<Constant " Gotta go ">
      11  ?<Constant " I am the ">
      11  ?<Constant " I dream  ">
      11  ?<Constant " Scanning ">
      11  ?<Constant " cheese...">
      11  ?<Constant "----------">
       9  ?<Constant "115200\r\n">
       9  ?<Constant "460800\r\n">
      11  ?<Constant "<<<<<<<<<<">
      11  ?<Constant ">>>>>>>>>>">
      24  ?<Constant "AT+S.PING=152.1.14.14\r\n">
      19  ?<Constant "AT+S.SOCKD=32000\r\n">
      11  ?<Constant "I can\'t do">
      11  ?<Constant "I\'m afraid">
      11  ?<Constant "MSP430  JR">
      11  ?<Constant "Port:32000">
      11  ?<Constant "Samic fast">
      11  ?<Constant "Sometimes,">
      11  ?<Constant "Wazzup? :)">
      11  ?<Constant "that Dave.">
      11  ?<Initializer for IP_line1>
      11  ?<Initializer for IP_line2>
       2  ?<Initializer for higher_baud>
       1  ?<Initializer for iot_status_reg>
       2  ?<Initializer for lower_baud>
       2  ?<Initializer for sock_init_command>
       2  ?<Initializer for sock_ping_command>
      16  IOT_Char_Rx
      11  IP_line1
      11  IP_line2
      96  Init_IoT
       8  Init_Serial
      38  Init_Serial_UCA0
      38  Init_Serial_UCA3
      16  Main_Char_Rx
      32  USCI_A0_ISR
       2  USCI_A0_ISR::??INTVEC 96
     134  USCI_A3_ISR
       2  USCI_A3_ISR::??INTVEC 48
       2  _A_PBIE_L
       2  _A_PBOUT_L
       2  _A_PCOUT_L
       2  _A_PDOUT_L
       2  _A_TA0CCTL0_L
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0IFG_L
       2  _A_UCA0IV_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA0RXBUF_L
       2  _A_UCA0STATW_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA3BRW_L
       2  _A_UCA3CTLW0_L
       2  _A_UCA3IE_L
       2  _A_UCA3IFG_L
       2  _A_UCA3IV_L
       2  _A_UCA3MCTLW_L
       2  _A_UCA3RXBUF_L
       2  _A_UCA3STATW_L
       2  _A_UCA3TXBUF_L
       1  chars_to_read
     210  check_for_input
       2  higher_baud
       1  iot_status_reg
       1  iot_tx_wr
       1  left_direction
       1  left_pwm
       2  lower_baud
       1  main_ring_rd
     628  parse_command
     112  parse_test
      82  read_into_buffer
       1  right_direction
       1  right_pwm
       1  rx_wr_temp
       2  sock_init_command
       2  sock_ping_command
       1  string_index
      14  transmit_charA0
      14  transmit_charA3

 
 1 240 bytes in segment CODE
    46 bytes in segment DATA16_AN
   281 bytes in segment DATA16_C
    31 bytes in segment DATA16_I
    31 bytes in segment DATA16_ID
    41 bytes in segment DATA16_Z
     4 bytes in segment INTVEC
   166 bytes in segment ISR_CODE
 
 1 406 bytes of CODE  memory
   312 bytes of CONST memory (+  4 bytes shared)
    72 bytes of DATA  memory (+ 46 bytes shared)

Errors: none
Warnings: none
