###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           17/Apr/2018  23:36:59
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\serial.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EWFCC2.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\serial.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\List\serial.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_09\Debug\Obj\serial.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_09\serial.c
      1          //===============================================================
      2          //  File Name: serial.c
      3          //  Description: This file contains the Initialization and
      4          //                    interrupts for serial I/O
      5          //
      6          //  Author: Sam Messick
      7          //  Date Mar. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "serial.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x262
   \   union <unnamed> _A_PDOUT_L
   \                     _A_PDOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c0
   \   union <unnamed> _A_UCA0CTLW0_L
   \                     _A_UCA0CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c6
   \   union <unnamed> _A_UCA0BRW_L
   \                     _A_UCA0BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5c8
   \   union <unnamed> _A_UCA0MCTLW_L
   \                     _A_UCA0MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ca
   \   union <unnamed> _A_UCA0STATW_L
   \                     _A_UCA0STATW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5cc
   \   union <unnamed> _A_UCA0RXBUF_L
   \                     _A_UCA0RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5ce
   \   union <unnamed> _A_UCA0TXBUF_L
   \                     _A_UCA0TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5da
   \   union <unnamed> _A_UCA0IE_L
   \                     _A_UCA0IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5dc
   \   union <unnamed> _A_UCA0IFG_L
   \                     _A_UCA0IFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x5de
   \   union <unnamed> _A_UCA0IV_L
   \                     _A_UCA0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x620
   \   union <unnamed> _A_UCA3CTLW0_L
   \                     _A_UCA3CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x626
   \   union <unnamed> _A_UCA3BRW_L
   \                     _A_UCA3BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x628
   \   union <unnamed> _A_UCA3MCTLW_L
   \                     _A_UCA3MCTLW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62a
   \   union <unnamed> _A_UCA3STATW_L
   \                     _A_UCA3STATW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62c
   \   union <unnamed> _A_UCA3RXBUF_L
   \                     _A_UCA3RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62e
   \   union <unnamed> _A_UCA3TXBUF_L
   \                     _A_UCA3TXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63a
   \   union <unnamed> _A_UCA3IE_L
   \                     _A_UCA3IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63c
   \   union <unnamed> _A_UCA3IFG_L
   \                     _A_UCA3IFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x63e
   \   union <unnamed> _A_UCA3IV_L
   \                     _A_UCA3IV_L:
   \   000000                DS8 2
     12          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile uint8_t iot_tx_wr;                                   // IOT transmit buffer index
   \                     iot_tx_wr:
   \   000000                DS8 1

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile uint8_t iot_status_reg = SOFT_RESET;                 // Register for managing IOT flags
   \                     iot_status_reg:
   \   000000                DS8 1
   \   000001                REQUIRE `?<Initializer for iot_status_reg>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          uint8_t main_ring_rd;
   \                     main_ring_rd:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          int8_t chars_to_read; 
   \                     chars_to_read:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          char IOT_Char_Rx[SMALL_RING_SIZE];
   \                     IOT_Char_Rx:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          char IP_line1[COLUMN_NUM_COLUMNS];
   \                     IP_line1:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          char IP_line2[COLUMN_NUM_COLUMNS];
   \                     IP_line2:
   \   000000                DS8 11

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          char Main_Char_Rx[SMALL_RING_SIZE];
   \                     Main_Char_Rx:
   \   000000                DS8 16
     21          

   \                                 In  segment CODE, align 2
     22          void Init_Serial(void){
   \                     Init_Serial:
     23            Init_Serial_UCA0();
   \   000000   ........     CALLA   #Init_Serial_UCA0
     24            Init_Serial_UCA3();
   \   000004   ........     BRA     #Init_Serial_UCA3
     25          }
     26          

   \                                 In  segment CODE, align 2
     27          void Init_Serial_UCA0(void){
   \                     Init_Serial_UCA0:
     28            // Confiure UART 0
     29            UCA0CTLW0  = REGISTER_WORD_SIZE;    // Use word-size register (16-bit)
   \   000000   8243C005     MOV.W   #0x0, &0x5c0
     30            UCA0CTLW0 |= UCSSEL__SMCLK;         // Set SMCLK as frequency source
   \   000004   B2D08000C005 BIS.W   #0x80, &0x5c0
     31            UCA0CTLW0 |= UCSWRST;               // Set software reset enable
   \   00000A   92D3C005     BIS.W   #0x1, &0x5c0
     32            UCA0BRW    = UCA_BRW_115;           // ~115200 Baud
   \   00000E   A242C605     MOV.W   #0x4, &0x5c6
     33            UCA0MCTLW  = UCA_MCTL_115;
   \   000012   B2405155C805 MOV.W   #0x5551, &0x5c8
     34            UCA0CTL1  &= ~UCSWRST;              // Release from software reset
   \   000018   D2C3C005     BIC.B   #0x1, &0x5c0
     35            UCA0IE    |= UCRXIE;
   \   00001C   92D3DA05     BIS.W   #0x1, &0x5da
     36            UCA0IFG   &= ~(UCRXIFG);
   \   000020   92C3DC05     BIC.W   #0x1, &0x5dc
     37          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_UCA0CTLW0_L
   \   000026                REQUIRE _A_UCA0BRW_L
   \   000026                REQUIRE _A_UCA0MCTLW_L
   \   000026                REQUIRE _A_UCA0IE_L
   \   000026                REQUIRE _A_UCA0IFG_L
     38          

   \                                 In  segment CODE, align 2
     39          void Init_Serial_UCA3(void){
   \                     Init_Serial_UCA3:
     40            // Confiure UART 3
     41            UCA3CTLW0  = REGISTER_WORD_SIZE;    // Use word-size register (16-bit)
   \   000000   82432006     MOV.W   #0x0, &0x620
     42            UCA3CTLW0 |= UCSSEL__SMCLK;         // Set SMCLK as frequency source
   \   000004   B2D080002006 BIS.W   #0x80, &0x620
     43            UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \   00000A   92D32006     BIS.W   #0x1, &0x620
     44            UCA3BRW    = UCA_BRW_115;           // ~115200 Baud
   \   00000E   A2422606     MOV.W   #0x4, &0x626
     45            UCA3MCTLW  = UCA_MCTL_115;
   \   000012   B24051552806 MOV.W   #0x5551, &0x628
     46            UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   000018   D2C32006     BIC.B   #0x1, &0x620
     47            UCA3IE    |= UCRXIE;
   \   00001C   92D33A06     BIS.W   #0x1, &0x63a
     48            UCA3IFG   &= ~(UCRXIFG);
   \   000020   92C33C06     BIC.W   #0x1, &0x63c
     49          }
   \   000024   1001         RETA
   \   000026                REQUIRE _A_UCA3CTLW0_L
   \   000026                REQUIRE _A_UCA3BRW_L
   \   000026                REQUIRE _A_UCA3MCTLW_L
   \   000026                REQUIRE _A_UCA3IE_L
   \   000026                REQUIRE _A_UCA3IFG_L
     50          

   \                                 In  segment CODE, align 2
     51          void transmit_charA3(char character){
   \                     transmit_charA3:
   \                     ??transmit_charA3_0:
     52            while (UCA3STATW & UCBUSY); // Transmit complete interrupt flag
   \   000000   92B32A06     BIT.W   #0x1, &0x62a
   \   000004   FD2F         JC      ??transmit_charA3_0
     53              UCA3TXBUF = character;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824C2E06     MOV.W   R12, &0x62e
     54          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_UCA3STATW_L
   \   00000E                REQUIRE _A_UCA3TXBUF_L
     55          

   \                                 In  segment CODE, align 2
     56          void transmit_charA0(char character){
   \                     transmit_charA0:
   \                     ??transmit_charA0_0:
     57            while (UCA0STATW & UCBUSY); // Transmit complete interrupt flag
   \   000000   92B3CA05     BIT.W   #0x1, &0x5ca
   \   000004   FD2F         JC      ??transmit_charA0_0
     58              UCA0TXBUF = character;
   \   000006   4C4C         MOV.B   R12, R12
   \   000008   824CCE05     MOV.W   R12, &0x5ce
     59          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_UCA0STATW_L
   \   00000E                REQUIRE _A_UCA0TXBUF_L
     60          

   \                                 In  segment CODE, align 2
     61          void check_for_input(void){
   \                     check_for_input:
     62            
     63              if(IOT_STATUS(IP_READY))
   \   000000   E2B3....     BIT.B   #0x2, &iot_status_reg
   \   000004   2C28         JNC     ??check_for_input_1
     64              {
     65                // Print out WiFi module IP address on lines 3 and 4 of LCD
     66                strncpy(IP_line1, IOT_Char_Rx + CHAR2, CHAR7);
   \   000006   3E400600     MOV.W   #0x6, R14
   \   00000A   3D40....     MOV.W   #IOT_Char_Rx + 1, R13
   \   00000E   3C40....     MOV.W   #IP_line1, R12
   \   000012   ........     CALLA   #strncpy
     67                strncpy(IP_line2, IOT_Char_Rx + CHAR9, CHAR7);
   \   000016   3E400600     MOV.W   #0x6, R14
   \   00001A   3D40....     MOV.W   #IOT_Char_Rx + 8, R13
   \   00001E   3C40....     MOV.W   #IP_line2, R12
   \   000022   ........     CALLA   #strncpy
     68                
     69                word1 = "   ncsu   ";
   \   000026   B240........ MOV.W   #`?<Constant "   ncsu   ">`, &word1
     70                word2 = "          ";
   \   00002C   B240........ MOV.W   #`?<Constant "          ">`, &word2
     71                word3 = IP_line1;
   \   000032   B240........ MOV.W   #IP_line1, &word3
     72                word4 = IP_line2;
   \   000038   B240........ MOV.W   #IP_line2, &word4
     73                LCD_print(word1,word2,word3,word4);
   \   00003E   1F42....     MOV.W   &word4, R15
   \   000042   1E42....     MOV.W   &word3, R14
   \   000046   1D42....     MOV.W   &word2, R13
   \   00004A   1C42....     MOV.W   &word1, R12
   \   00004E   ........     CALLA   #LCD_print
     74                iot_tx_wr = BEGINNING;
   \   000052   C243....     MOV.B   #0x0, &iot_tx_wr
     75                IOT_DISABLE(IP_READY);
   \   000056   E2C3....     BIC.B   #0x2, &iot_status_reg
     76                IOT_DISABLE(SOFT_RESET);
   \   00005A   D2C3....     BIC.B   #0x1, &iot_status_reg
     77              }
     78              if(IOT_STATUS(CHECK_FOR_COMMAND))
   \                     ??check_for_input_1:
   \   00005E   E2B2....     BIT.B   #0x4, &iot_status_reg
   \   000062   1128         JNC     ??check_for_input_0
     79                if(Main_Char_Rx[CHAR1] == COMMAND_START)
   \   000064   F2902A00.... CMP.B   #0x2a, &Main_Char_Rx
   \   00006A   0520         JNE     ??check_for_input_2
     80                {
     81                  parse_command();
   \   00006C   ........     CALLA   #parse_command
     82                  IOT_DISABLE(CHECK_FOR_COMMAND);
   \   000070   E2C2....     BIC.B   #0x4, &iot_status_reg
   \   000074   083C         JMP     ??check_for_input_0
     83                }
     84                else if(Main_Char_Rx[CHAR1] == TEST_START)
   \                     ??check_for_input_2:
   \   000076   F2902E00.... CMP.B   #0x2e, &Main_Char_Rx
   \   00007C   0420         JNE     ??check_for_input_0
     85                {
     86                  parse_test();
   \   00007E   ........     CALLA   #parse_test
     87                  IOT_DISABLE(CHECK_FOR_COMMAND);
   \   000082   E2C2....     BIC.B   #0x4, &iot_status_reg
     88                }
     89              read_into_buffer();
   \                     ??check_for_input_0:
   \   000086   ........     BRA     #read_into_buffer
     90              //UCA3IE |= UCRXIE;
     91          }
     92          
     93          // Updates main buffer alongside iot buffer

   \                                 In  segment CODE, align 2
     94          void read_into_buffer(void){
   \                     read_into_buffer:
   \                     ??read_into_buffer_0:
     95            static uint8_t rx_wr_temp;
     96            while(rx_wr_temp != iot_tx_wr)
   \   000000   D292........ CMP.B   &iot_tx_wr, &??rx_wr_temp
   \   000006   0424         JEQ     ??read_into_buffer_1
     97              rx_wr_temp = iot_tx_wr;
   \   000008   D242........ MOV.B   &iot_tx_wr, &??rx_wr_temp
   \   00000E   F83F         JMP     ??read_into_buffer_0
     98            while(main_ring_rd != rx_wr_temp || chars_to_read > COUNTER_RESET)
   \                     ??read_into_buffer_1:
   \   000010   D292........ CMP.B   &??rx_wr_temp, &main_ring_rd
   \   000016   0320         JNE     ??read_into_buffer_2
   \   000018   D293....     CMP.B   #0x1, &chars_to_read
   \   00001C   1C38         JL      ??read_into_buffer_3
     99            {
    100              Main_Char_Rx[main_ring_rd] = IOT_Char_Rx[main_ring_rd];
   \                     ??read_into_buffer_2:
   \   00001E   5E42....     MOV.B   &main_ring_rd, R14
   \   000022   4E4E         MOV.B   R14, R14
   \   000024   5F42....     MOV.B   &main_ring_rd, R15
   \   000028   4F4F         MOV.B   R15, R15
   \   00002A   DF4E........ MOV.B   IOT_Char_Rx(R14), Main_Char_Rx(R15)
    101              chars_to_read--;
   \   000030   F253....     ADD.B   #0xff, &chars_to_read
    102              if(Main_Char_Rx[main_ring_rd] == '\n' || ++main_ring_rd >= SMALL_RING_SIZE)
   \   000034   5F42....     MOV.B   &main_ring_rd, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A   FF900A00.... CMP.B   #0xa, Main_Char_Rx(R15)
   \   000040   0624         JEQ     ??read_into_buffer_4
   \   000042   D253....     ADD.B   #0x1, &main_ring_rd
   \   000046   F2901000.... CMP.B   #0x10, &main_ring_rd
   \   00004C   E12B         JNC     ??read_into_buffer_1
    103              {
    104                main_ring_rd = BEGINNING;
   \                     ??read_into_buffer_4:
   \   00004E   C243....     MOV.B   #0x0, &main_ring_rd
    105                IOT_ENABLE(CHECK_FOR_COMMAND);
   \   000052   E2D2....     BIS.B   #0x4, &iot_status_reg
    106                break;
    107              }
    108            }
    109          }
   \                     ??read_into_buffer_3:
   \   000056   1001         RETA

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??rx_wr_temp:
   \   000000                DS8 1
    110          

   \                                 In  segment CODE, align 2
    111          void parse_command(void){
   \                     parse_command:
   \   000000   3B15         PUSHM.W #0x4, R11
    112            static char left_direction;
    113            static char right_direction;
    114            static uint8_t left_pwm;
    115            static uint8_t right_pwm;
    116            
    117            uint16_t password_attempt;   // Number between 0000-9999 validating user
    118            char command_identifier;
    119            
    120            password_attempt = (Main_Char_Rx[CHAR2] - ASCII_NUM_SHIFT)*THOUSAND +
    121                               (Main_Char_Rx[CHAR3] - ASCII_NUM_SHIFT)*HUNDRED  +
    122                               (Main_Char_Rx[CHAR4] - ASCII_NUM_SHIFT)*TEN      +
    123                               (Main_Char_Rx[CHAR5] - ASCII_NUM_SHIFT);
   \   000002   5E42....     MOV.B   &Main_Char_Rx + 1, R14
   \   000006   4E4E         MOV.B   R14, R14
   \   000008   5E0A         RLAM.W  #0x3, R14
   \   00000A   0F4E         MOV.W   R14, R15
   \   00000C   5E06         RLAM.W  #0x2, R14
   \   00000E   0F5E         ADD.W   R14, R15
   \   000010   0E5E         RLA.W   R14
   \   000012   0F5E         ADD.W   R14, R15
   \   000014   0E5E         RLA.W   R14
   \   000016   0F5E         ADD.W   R14, R15
   \   000018   0E5E         RLA.W   R14
   \   00001A   0F5E         ADD.W   R14, R15
   \   00001C   0E5E         RLA.W   R14
   \   00001E   0E5F         ADD.W   R15, R14
   \   000020   5F42....     MOV.B   &Main_Char_Rx + 2, R15
   \   000024   4F4F         MOV.B   R15, R15
   \   000026   5F06         RLAM.W  #0x2, R15
   \   000028   0D4F         MOV.W   R15, R13
   \   00002A   5F0A         RLAM.W  #0x3, R15
   \   00002C   0D5F         ADD.W   R15, R13
   \   00002E   0F5F         RLA.W   R15
   \   000030   0F5D         ADD.W   R13, R15
   \   000032   0E5F         ADD.W   R15, R14
   \   000034   5F42....     MOV.B   &Main_Char_Rx + 3, R15
   \   000038   4F4F         MOV.B   R15, R15
   \   00003A                RPT     #0xa
   \   00003A   49180E5F     ADDX.W  R15, R14
   \   00003E   5F42....     MOV.B   &Main_Char_Rx + 4, R15
   \   000042   4F4F         MOV.B   R15, R15
   \   000044   0E5F         ADD.W   R15, R14
   \   000046   3E50B02F     ADD.W   #0x2fb0, R14
   \   00004A   0B4E         MOV.W   R14, R11
    124            
    125            if(password_attempt == COMMAND_PASS)
   \   00004C   3B90D121     CMP.W   #0x21d1, R11
   \   000050   0321         JNE     ??parse_command_1
    126            {
    127              command_identifier = Main_Char_Rx[CHAR6];
   \   000052   5842....     MOV.B   &Main_Char_Rx + 5, R8
    128              switch(command_identifier)
   \   000056   4E48         MOV.B   R8, R14
   \   000058   7E804100     SUB.B   #0x41, R14
   \   00005C   A124         JEQ     ??parse_command_3
   \   00005E   5E83         SUB.B   #0x1, R14
   \   000060   B524         JEQ     ??parse_command_4
   \   000062   7E800900     SUB.B   #0x9, R14
   \   000066   0A24         JEQ     ??parse_command_5
   \   000068   5E83         SUB.B   #0x1, R14
   \   00006A   F224         JEQ     ??parse_command_6
   \   00006C   5E83         SUB.B   #0x1, R14
   \   00006E   0624         JEQ     ??parse_command_5
   \   000070   7E800B00     SUB.B   #0xb, R14
   \   000074   D724         JEQ     ??parse_command_7
   \   000076   5E83         SUB.B   #0x1, R14
   \   000078   BF24         JEQ     ??parse_command_8
   \   00007A   EE3C         JMP     ??parse_command_1
    129              {
    130              case LEFT_FORWARD:
    131              case LEFT_REVERSE:                    // A PWM value was specified
    132                
    133                // Retrieve PWM values
    134                left_direction = Main_Char_Rx[CHAR6];
   \                     ??parse_command_5:
   \   00007C   D242........ MOV.B   &Main_Char_Rx + 5, &??left_direction
    135                right_direction = Main_Char_Rx[CHAR7];
   \   000082   D242........ MOV.B   &Main_Char_Rx + 6, &??right_direction
    136                
    137                left_pwm =     (Main_Char_Rx[CHAR8] - ASCII_NUM_SHIFT)*HUNDRED  +
    138                               (Main_Char_Rx[CHAR9] - ASCII_NUM_SHIFT)*TEN      +
    139                               (Main_Char_Rx[CHAR10] - ASCII_NUM_SHIFT);
   \   000088   5E42....     MOV.B   &Main_Char_Rx + 7, R14
   \   00008C                RPT     #0x2
   \   00008C   41184E5E     RLAX.B  R14
   \   000090   4F4E         MOV.B   R14, R15
   \   000092                RPT     #0x3
   \   000092   42184E5E     RLAX.B  R14
   \   000096   4F5E         ADD.B   R14, R15
   \   000098   4E5E         RLA.B   R14
   \   00009A   4E5F         ADD.B   R15, R14
   \   00009C   5F42....     MOV.B   &Main_Char_Rx + 8, R15
   \   0000A0                RPT     #0xa
   \   0000A0   49184E5F     ADDX.B  R15, R14
   \   0000A4   5E52....     ADD.B   &Main_Char_Rx + 9, R14
   \   0000A8   7E503000     ADD.B   #0x30, R14
   \   0000AC   C24E....     MOV.B   R14, &??left_pwm
    140                right_pwm =    (Main_Char_Rx[CHAR11] - ASCII_NUM_SHIFT)*HUNDRED  +
    141                               (Main_Char_Rx[CHAR12] - ASCII_NUM_SHIFT)*TEN      +
    142                               (Main_Char_Rx[CHAR13] - ASCII_NUM_SHIFT);
   \   0000B0   5E42....     MOV.B   &Main_Char_Rx + 10, R14
   \   0000B4                RPT     #0x2
   \   0000B4   41184E5E     RLAX.B  R14
   \   0000B8   4F4E         MOV.B   R14, R15
   \   0000BA                RPT     #0x3
   \   0000BA   42184E5E     RLAX.B  R14
   \   0000BE   4F5E         ADD.B   R14, R15
   \   0000C0   4E5E         RLA.B   R14
   \   0000C2   4E5F         ADD.B   R15, R14
   \   0000C4   5F42....     MOV.B   &Main_Char_Rx + 11, R15
   \   0000C8                RPT     #0xa
   \   0000C8   49184E5F     ADDX.B  R15, R14
   \   0000CC   5E52....     ADD.B   &Main_Char_Rx + 12, R14
   \   0000D0   7E503000     ADD.B   #0x30, R14
   \   0000D4   C24E....     MOV.B   R14, &??right_pwm
    143                
    144                left_pwm  %= MAX_PWM;     // Bring pwm values within range
   \   0000D8   3A40FF00     MOV.W   #0xff, R10
   \   0000DC   5C42....     MOV.B   &??left_pwm, R12
   \   0000E0   4C4C         MOV.B   R12, R12
   \   0000E2   0E4A         MOV.W   R10, R14
   \   0000E4   ........     CALLA   #?DivMod16s
   \   0000E8   0212         PUSH.W  SR
   \   0000EA   32C2         DINT
   \   0000EC   0343         NOP
   \   0000EE   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   0000F2   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   0000F6   D282........ SUB.B   &__iar_HWMUL + 10, &??left_pwm // RESLO
   \   0000FC   0343         NOP
   \   0000FE   3241         POP.W   SR
    145                right_pwm %= MAX_PWM; 
   \   000100   3A40FF00     MOV.W   #0xff, R10
   \   000104   5C42....     MOV.B   &??right_pwm, R12
   \   000108   4C4C         MOV.B   R12, R12
   \   00010A   0E4A         MOV.W   R10, R14
   \   00010C   ........     CALLA   #?DivMod16s
   \   000110   0212         PUSH.W  SR
   \   000112   32C2         DINT
   \   000114   0343         NOP
   \   000116   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   00011A   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   00011E   D282........ SUB.B   &__iar_HWMUL + 10, &??right_pwm // RESLO
   \   000124   0343         NOP
   \   000126   3241         POP.W   SR
    146                
    147                // Determine PWM direction
    148                switch(left_direction)
   \   000128   5E42....     MOV.B   &??left_direction, R14
   \   00012C   7E804B00     SUB.B   #0x4b, R14
   \   000130   0324         JEQ     ??parse_command_9
   \   000132   6E83         SUB.B   #0x2, R14
   \   000134   1B24         JEQ     ??parse_command_10
   \   000136   903C         JMP     ??parse_command_1
    149                {
    150                case LEFT_FORWARD:
    151                  switch(right_direction)
   \                     ??parse_command_9:
   \   000138   5E42....     MOV.B   &??right_direction, R14
   \   00013C   7E805100     SUB.B   #0x51, R14
   \   000140   0324         JEQ     ??parse_command_11
   \   000142   6E83         SUB.B   #0x2, R14
   \   000144   0A24         JEQ     ??parse_command_12
   \   000146   883C         JMP     ??parse_command_1
    152                  {
    153                  case RIGHT_FORWARD:
    154                    Left_Motor_ON_FORWARD(left_pwm);
   \                     ??parse_command_11:
   \   000148   5C42....     MOV.B   &??left_pwm, R12
   \   00014C   ........     CALLA   #Left_Motor_ON_FORWARD
    155                    Right_Motor_ON_FORWARD(right_pwm);
   \   000150   5C42....     MOV.B   &??right_pwm, R12
   \   000154   ........     CALLA   #Right_Motor_ON_FORWARD
    156                    break;
   \   000158   7F3C         JMP     ??parse_command_1
    157                    
    158                  case RIGHT_REVERSE:
    159                    Left_Motor_ON_FORWARD(left_pwm);
   \                     ??parse_command_12:
   \   00015A   5C42....     MOV.B   &??left_pwm, R12
   \   00015E   ........     CALLA   #Left_Motor_ON_FORWARD
    160                    Right_Motor_ON_REVERSE(right_pwm);
   \   000162   5C42....     MOV.B   &??right_pwm, R12
   \   000166   ........     CALLA   #Right_Motor_ON_REVERSE
    161                  }break;
   \   00016A   763C         JMP     ??parse_command_1
    162                  
    163                case LEFT_REVERSE:
    164                  switch(right_direction)
   \                     ??parse_command_10:
   \   00016C   5E42....     MOV.B   &??right_direction, R14
   \   000170   7E805100     SUB.B   #0x51, R14
   \   000174   0324         JEQ     ??parse_command_13
   \   000176   6E83         SUB.B   #0x2, R14
   \   000178   0A24         JEQ     ??parse_command_14
   \   00017A   6E3C         JMP     ??parse_command_1
    165                  {
    166                  case RIGHT_FORWARD:
    167                    Left_Motor_ON_REVERSE(left_pwm);
   \                     ??parse_command_13:
   \   00017C   5C42....     MOV.B   &??left_pwm, R12
   \   000180   ........     CALLA   #Left_Motor_ON_REVERSE
    168                    Right_Motor_ON_FORWARD(right_pwm);
   \   000184   5C42....     MOV.B   &??right_pwm, R12
   \   000188   ........     CALLA   #Right_Motor_ON_FORWARD
    169                    break;
   \   00018C   653C         JMP     ??parse_command_1
    170                    
    171                  case RIGHT_REVERSE:
    172                    Left_Motor_ON_REVERSE(left_pwm);
   \                     ??parse_command_14:
   \   00018E   5C42....     MOV.B   &??left_pwm, R12
   \   000192   ........     CALLA   #Left_Motor_ON_REVERSE
    173                    Right_Motor_ON_REVERSE(right_pwm);
   \   000196   5C42....     MOV.B   &??right_pwm, R12
   \   00019A   ........     CALLA   #Right_Motor_ON_REVERSE
    174                  }
    175                } break;
   \   00019E   5C3C         JMP     ??parse_command_1
    176                
    177              case EMOTE1:                         // Print Samic fast meme to LCD
    178                word1 = " Gotta go ";
   \                     ??parse_command_3:
   \   0001A0   B240........ MOV.W   #`?<Constant " Gotta go ">`, &word1
    179                word2 = "<<<<<<<<<<";
   \   0001A6   B240........ MOV.W   #`?<Constant "<<<<<<<<<<">`, &word2
    180                word3 = "Samic fast";
   \   0001AC   B240........ MOV.W   #`?<Constant "Samic fast">`, &word3
    181                word4 = ">>>>>>>>>>";
   \   0001B2   B240........ MOV.W   #`?<Constant ">>>>>>>>>>">`, &word4
    182                LCD_print(word1,word2,word3,word4);
   \   0001B8   1F42....     MOV.W   &word4, R15
   \   0001BC   1E42....     MOV.W   &word3, R14
   \   0001C0   1D42....     MOV.W   &word2, R13
   \   0001C4   1C42....     MOV.W   &word1, R12
   \   0001C8   ........     CALLA   #LCD_print
    183                
    184              case EMOTE2:                         // Print Happy Car meme to LCD
    185                word1 = " _______  ";
   \                     ??parse_command_4:
   \   0001CC   B240........ MOV.W   #`?<Constant " _______  ">`, &word1
    186                word2 = "/^_____^\\ ";
   \   0001D2   B240........ MOV.W   #`?<Constant "/^_____^\\\\ ">`, &word2
    187                word3 = "\\_______/ ";
   \   0001D8   B240........ MOV.W   #`?<Constant "\\\\_______/ ">`, &word3
    188                word4 = "Happy Car ";
   \   0001DE   B240........ MOV.W   #`?<Constant "Happy Car ">`, &word4
    189                LCD_print(word1,word2,word3,word4);
   \   0001E4   1F42....     MOV.W   &word4, R15
   \   0001E8   1E42....     MOV.W   &word3, R14
   \   0001EC   1D42....     MOV.W   &word2, R13
   \   0001F0   1C42....     MOV.W   &word1, R12
   \   0001F4   ........     CALLA   #LCD_print
    190                
    191              case EMOTE3:                         // Print Dank Memes ad to LCD
    192                word1 = " MSP430 JR";
   \                     ??parse_command_8:
   \   0001F8   B240........ MOV.W   #`?<Constant " MSP430 JR">`, &word1
    193                word2 = "----------";
   \   0001FE   B240........ MOV.W   #`?<Constant "----------">`, &word2
    194                word3 = "Now w/ 2x ";
   \   000204   B240........ MOV.W   #`?<Constant "Now w/ 2x ">`, &word3
    195                word4 = "Dank memes";
   \   00020A   B240........ MOV.W   #`?<Constant "Dank memes">`, &word4
    196                LCD_print(word1,word2,word3,word4);
   \   000210   1F42....     MOV.W   &word4, R15
   \   000214   1E42....     MOV.W   &word3, R14
   \   000218   1D42....     MOV.W   &word2, R13
   \   00021C   1C42....     MOV.W   &word1, R12
   \   000220   ........     CALLA   #LCD_print
    197                
    198              case EMOTE4:                         // Print cautionary meme to LCD
    199                word1 = "Look both ";
   \                     ??parse_command_7:
   \   000224   B240........ MOV.W   #`?<Constant "Look both ">`, &word1
    200                word2 = "ways bfore";
   \   00022A   B240........ MOV.W   #`?<Constant "ways bfore">`, &word2
    201                word3 = "crossin da";
   \   000230   B240........ MOV.W   #`?<Constant "crossin da">`, &word3
    202                word4 = "black line";
   \   000236   B240........ MOV.W   #`?<Constant "black line">`, &word4
    203                LCD_print(word1,word2,word3,word4);
   \   00023C   1F42....     MOV.W   &word4, R15
   \   000240   1E42....     MOV.W   &word3, R14
   \   000244   1D42....     MOV.W   &word2, R13
   \   000248   1C42....     MOV.W   &word1, R12
   \   00024C   ........     CALLA   #LCD_print
    204                
    205              case BLACK_LINE_MODE:
    206                P5OUT &= ~IOT_RESET;   // Disable IOT device
   \                     ??parse_command_6:
   \   000250   D2C34202     BIC.B   #0x1, &0x242
    207                P8OUT |= IR_LED;       // Enable infrared LED for sensor readings
   \   000254   D2D36302     BIS.B   #0x1, &0x263
    208                
    209                /* Goal of code: drive in large circle, disabling white detection for 5 seconds
    210                 *               enable white detection
    211                 *               if white found, enable black detection
    212                 *               if black found, stop, turn, follow black line
    213                 *               after 20 seconds, turn car out of loop
    214                 *               drive forward for 4 seconds and stop (display meme)
    215                 */
    216              }
    217              /*
    218              // Simple directional command (alternatives for debugging)
    219              direction = Main_Char_Rx[CHAR6];
    220              
    221              // Retrieve duration from buffer (milliseconds)
    222              delay_time     +=(Main_Char_Rx[CHAR7] - ASCII_NUM_SHIFT)*THOUSAND +
    223                               (Main_Char_Rx[CHAR8] - ASCII_NUM_SHIFT)*HUNDRED  +
    224                               (Main_Char_Rx[CHAR9] - ASCII_NUM_SHIFT)*TEN      +
    225                               (Main_Char_Rx[CHAR10] - ASCII_NUM_SHIFT);
    226              switch(direction)
    227              {
    228              case 'S':
    229                Wheels_OFF();
    230                break;
    231              case 'F':
    232                Wheels_OFF();
    233                Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
    234                Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
    235                break;
    236              case 'B':
    237                Wheels_OFF();
    238                Left_Motor_ON_REVERSE(LEFT_FORWARD_SPEED);
    239                Right_Motor_ON_REVERSE(RIGHT_FORWARD_SPEED);
    240                break;
    241              case 'R':
    242                Wheels_OFF();
    243                Left_Motor_ON_FORWARD(LEFT_FORWARD_SPEED);
    244                break;
    245              case'L':
    246                Wheels_OFF();
    247                Right_Motor_ON_FORWARD(RIGHT_FORWARD_SPEED);
    248                break;  
    249              }
    250              
    251              // Enable timer interrupt
    252              TA0CCTL0 |= CCIE;
    253              IOT_ENABLE(COMMAND_EXECUTING);
    254            }
    255            */
    256            }
    257          }
   \                     ??parse_command_1:
   \   000258   3817         POPM.W  #0x4, R11
   \   00025A   1001         RETA
   \   00025C                REQUIRE _A_PCOUT_L
   \   00025C                REQUIRE _A_PDOUT_L

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??left_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??right_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??left_pwm:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??right_pwm:
   \   000000                DS8 1
    258          

   \                                 In  segment CODE, align 2
    259          void parse_test(void){
   \                     parse_test:
    260            uint8_t string_index;
    261            static char* higher_baud = "460800\r\n";
    262            static char* lower_baud  = "115200\r\n";
    263            
    264            switch(Main_Char_Rx[CHAR2])
   \   000000   5F42....     MOV.B   &Main_Char_Rx + 1, R15
   \   000004   7F804600     SUB.B   #0x46, R15
   \   000008   1A24         JEQ     ??parse_test_5
   \   00000A   7F800D00     SUB.B   #0xd, R15
   \   00000E   2F20         JNE     ??parse_test_2
    265            {
    266            case 'S': // 115200 baud
    267              UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \   000010   92D32006     BIS.W   #0x1, &0x620
    268              UCA3BRW = UCA_BRW_115;
   \   000014   A2422606     MOV.W   #0x4, &0x626
    269              UCA3MCTLW  = UCA_MCTL_115;
   \   000018   B24051552806 MOV.W   #0x5551, &0x628
    270              UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   00001E   D2C32006     BIC.B   #0x1, &0x620
    271              UCA3IE    |= UCRXIE;
   \   000022   92D33A06     BIS.W   #0x1, &0x63a
    272              for(string_index = BEGINNING; string_index < BAUD_WORD_SIZE; string_index++)
   \   000026   4E43         MOV.B   #0x0, R14
   \                     ??parse_test_0:
   \   000028   7E92         CMP.B   #0x8, R14
   \   00002A   212C         JC      ??parse_test_2
    273                transmit_charA0(lower_baud[string_index]);
   \   00002C   1F42....     MOV.W   &??lower_baud, R15
   \   000030   4E4E         MOV.B   R14, R14
   \   000032   0F5E         ADD.W   R14, R15
   \   000034   6C4F         MOV.B   @R15, R12
   \   000036   ........     CALLA   #transmit_charA0
   \   00003A   5E53         ADD.B   #0x1, R14
   \   00003C   F53F         JMP     ??parse_test_0
    274              break;
    275            case 'F': // 460800 baud
    276              UCA3CTLW0 |= UCSWRST;               // Set software reset enable
   \                     ??parse_test_5:
   \   00003E   92D32006     BIS.W   #0x1, &0x620
    277              UCA3BRW = UCA_BRW_460;
   \   000042   B24011002606 MOV.W   #0x11, &0x626
    278              UCA3MCTLW = UCA_MCTL_460;
   \   000048   B240104A2806 MOV.W   #0x4a10, &0x628
    279              UCA3CTL1  &= ~UCSWRST;              // Release from software reset
   \   00004E   D2C32006     BIC.B   #0x1, &0x620
    280              UCA3IE    |= UCRXIE;
   \   000052   92D33A06     BIS.W   #0x1, &0x63a
    281              for(string_index = BEGINNING; string_index < BAUD_WORD_SIZE; string_index++)
   \   000056   4E43         MOV.B   #0x0, R14
   \                     ??parse_test_1:
   \   000058   7E92         CMP.B   #0x8, R14
   \   00005A   092C         JC      ??parse_test_2
    282                transmit_charA0(higher_baud[string_index]);
   \   00005C   1F42....     MOV.W   &??higher_baud, R15
   \   000060   4E4E         MOV.B   R14, R14
   \   000062   0F5E         ADD.W   R14, R15
   \   000064   6C4F         MOV.B   @R15, R12
   \   000066   ........     CALLA   #transmit_charA0
   \   00006A   5E53         ADD.B   #0x1, R14
   \   00006C   F53F         JMP     ??parse_test_1
    283            }
    284          }
   \                     ??parse_test_2:
   \   00006E   1001         RETA
   \   000070                REQUIRE _A_UCA3CTLW0_L
   \   000070                REQUIRE _A_UCA3BRW_L
   \   000070                REQUIRE _A_UCA3MCTLW_L
   \   000070                REQUIRE _A_UCA3IE_L

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     ??higher_baud:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for higher_baud>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     ??lower_baud:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for lower_baud>`
    285          
    286          #pragma vector = USCI_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    287          __interrupt void USCI_A0_ISR(void){
   \                     USCI_A0_ISR:
   \   000000   0F12         PUSH.W  R15
    288            switch(__even_in_range(UCA0IV, eight))
   \   000002   1F42DE05     MOV.W   &0x5de, R15
   \   000006   2F93         CMP.W   #0x2, R15
   \   000008   0920         JNE     ??USCI_A0_ISR_1
    289            {
    290            case RXIFG:
    291              if(UCA0RXBUF == '\0')
   \   00000A   8293CC05     CMP.W   #0x0, &0x5cc
   \   00000E   0624         JEQ     ??USCI_A0_ISR_1
    292                break;
    293              // Transmit received character to IOT Module
    294              while(UCA3STATW & UCBUSY);
   \                     ??USCI_A0_ISR_0:
   \   000010   92B32A06     BIT.W   #0x1, &0x62a
   \   000014   FD2F         JC      ??USCI_A0_ISR_0
    295              UCA3TXBUF = UCA0RXBUF;
   \   000016   9242CC052E06 MOV.W   &0x5cc, &0x62e
    296            }
    297          }
   \                     ??USCI_A0_ISR_1:
   \   00001C   3F41         POP.W   R15
   \   00001E   0013         RETI
   \   000020                REQUIRE _A_UCA0RXBUF_L
   \   000020                REQUIRE _A_UCA3STATW_L
   \   000020                REQUIRE _A_UCA3TXBUF_L
   \   000020                REQUIRE _A_UCA0IV_L
    298          
    299          #pragma vector = USCI_A3_VECTOR

   \                                 In  segment ISR_CODE, align 2
    300          __interrupt void USCI_A3_ISR(void){
   \                     USCI_A3_ISR:
   \   000000   5F15         PUSHM.W #0x6, R15
    301            uint8_t temp;
    302            switch(__even_in_range(UCA3IV, eight))
   \   000002   1F423E06     MOV.W   &0x63e, R15
   \   000006   2F93         CMP.W   #0x2, R15
   \   000008   3F20         JNE     ??USCI_A3_ISR_1
    303            {
    304            case RXIFG:
    305              while(UCA0STATW & UCBUSY);
   \                     ??USCI_A3_ISR_0:
   \   00000A   92B3CA05     BIT.W   #0x1, &0x5ca
   \   00000E   FD2F         JC      ??USCI_A3_ISR_0
    306              UCA0TXBUF = UCA3RXBUF;             // Echo character to USB
   \   000010   92422C06CE05 MOV.W   &0x62c, &0x5ce
    307              
    308              chars_to_read++;
   \   000016   D253....     ADD.B   #0x1, &chars_to_read
    309              
    310              chars_to_read %= DOUBLE_COMMAND_LENGTH;
   \   00001A   3A401800     MOV.W   #0x18, R10
   \   00001E   5C42....     MOV.B   &chars_to_read, R12
   \   000022   8C11         SXT     R12
   \   000024   3CF3         AND.W   #0xffff, R12
   \   000026   0E4A         MOV.W   R10, R14
   \   000028   ........     CALLA   #?DivMod16s
   \   00002C   0212         PUSH.W  SR
   \   00002E   32C2         DINT
   \   000030   0343         NOP
   \   000032   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   000036   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   00003A   D282........ SUB.B   &__iar_HWMUL + 10, &chars_to_read // RESLO
   \   000040   0343         NOP
   \   000042   3241         POP.W   SR
    311              temp = iot_tx_wr;
   \   000044   5B42....     MOV.B   &iot_tx_wr, R11
    312              IOT_Char_Rx[temp] = UCA3RXBUF;     // Read character into interrupt buffer
   \   000048   1E422C06     MOV.W   &0x62c, R14
   \   00004C   4B4B         MOV.B   R11, R11
   \   00004E   CB4E....     MOV.B   R14, IOT_Char_Rx(R11)
    313              
    314              if(++iot_tx_wr >= SMALL_RING_SIZE || UCA3RXBUF == '\n')
   \   000052   5E42....     MOV.B   &iot_tx_wr, R14
   \   000056   5E53         ADD.B   #0x1, R14
   \   000058   C24E....     MOV.B   R14, &iot_tx_wr
   \   00005C   7E901000     CMP.B   #0x10, R14
   \   000060   042C         JC      ??USCI_A3_ISR_2
   \   000062   B2900A002C06 CMP.W   #0xa, &0x62c
   \   000068   0F20         JNE     ??USCI_A3_ISR_1
    315              {
    316                // Reset interrupt buffer index if end reached
    317                iot_tx_wr = BEGINNING;
   \                     ??USCI_A3_ISR_2:
   \   00006A   C243....     MOV.B   #0x0, &iot_tx_wr
    318                
    319                if(IOT_Char_Rx[CHAR1] == ':' &&
    320                   IOT_Char_Rx[CHAR2] == IP_LEAD_BYTE &&
    321                   IOT_STATUS(SOFT_RESET))
   \   00006E   F2903A00.... CMP.B   #0x3a, &IOT_Char_Rx
   \   000074   0920         JNE     ??USCI_A3_ISR_1
   \   000076   F2903100.... CMP.B   #0x31, &IOT_Char_Rx + 1
   \   00007C   0520         JNE     ??USCI_A3_ISR_1
   \   00007E   D2B3....     BIT.B   #0x1, &iot_status_reg
   \   000082   0228         JNC     ??USCI_A3_ISR_1
    322                {
    323                  IOT_ENABLE(IP_READY);               // Notify main that IP address is received
   \   000084   E2D3....     BIS.B   #0x2, &iot_status_reg
    324                }
    325              }
    326              break;
    327            }
    328          }
   \                     ??USCI_A3_ISR_1:
   \   000088   5A17         POPM.W  #0x6, R15
   \   00008A   0013         RETI
   \   00008C                REQUIRE _A_UCA0STATW_L
   \   00008C                REQUIRE _A_UCA0TXBUF_L
   \   00008C                REQUIRE _A_UCA3RXBUF_L
   \   00008C                REQUIRE _A_UCA3IV_L

   \                                 In  segment INTVEC, offset 0x30, root
   \                     `??USCI_A3_ISR::??INTVEC 48`:
   \   000030   ....         DC16    USCI_A3_ISR

   \                                 In  segment INTVEC, offset 0x60, root
   \                     `??USCI_A0_ISR::??INTVEC 96`:
   \   000060   ....         DC16    USCI_A0_ISR

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for iot_status_reg>`:
   \   000000   01           DC8 1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for higher_baud>`:
   \   000000   ....         DC16 `?<Constant "460800\\r\\n">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for lower_baud>`:
   \   000000   ....         DC16 `?<Constant "115200\\r\\n">`

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   ncsu   ">`:
   \   000000   2020206E6373 DC8 "   ncsu   "
   \            7520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Gotta go ">`:
   \   000000   20476F747461 DC8 " Gotta go "
   \            20676F2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "<<<<<<<<<<">`:
   \   000000   3C3C3C3C3C3C DC8 "<<<<<<<<<<"
   \            3C3C3C3C00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Samic fast">`:
   \   000000   53616D696320 DC8 "Samic fast"
   \            6661737400  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant ">>>>>>>>>>">`:
   \   000000   3E3E3E3E3E3E DC8 ">>>>>>>>>>"
   \            3E3E3E3E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " _______  ">`:
   \   000000   205F5F5F5F5F DC8 " _______  "
   \            5F5F202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "/^_____^\\\\ ">`:
   \   000000   2F5E5F5F5F5F DC8 "/^_____^\\ "
   \            5F5E5C2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "\\\\_______/ ">`:
   \   000000   5C5F5F5F5F5F DC8 "\\_______/ "
   \            5F5F2F2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Happy Car ">`:
   \   000000   486170707920 DC8 "Happy Car "
   \            4361722000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " MSP430 JR">`:
   \   000000   204D53503433 DC8 " MSP430 JR"
   \            30204A5200  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Now w/ 2x ">`:
   \   000000   4E6F7720772F DC8 "Now w/ 2x "
   \            2032782000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Dank memes">`:
   \   000000   44616E6B206D DC8 "Dank memes"
   \            656D657300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Look both ">`:
   \   000000   4C6F6F6B2062 DC8 "Look both "
   \            6F74682000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "ways bfore">`:
   \   000000   776179732062 DC8 "ways bfore"
   \            666F726500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "crossin da">`:
   \   000000   63726F737369 DC8 "crossin da"
   \            6E20646100  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "black line">`:
   \   000000   626C61636B20 DC8 "black line"
   \            6C696E6500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "460800\\r\\n">`:
   \   000000   343630383030 DC8 "460800\015\012"
   \            0D0A00      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "115200\\r\\n">`:
   \   000000   313135323030 DC8 "115200\015\012"
   \            0D0A00      

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Serial
        4   -> Init_Serial_UCA0
        0   -> Init_Serial_UCA3
      4   Init_Serial_UCA0
      4   Init_Serial_UCA3
      6   USCI_A0_ISR
     18   USCI_A3_ISR
       16 ?DivMod16s
      4   check_for_input
        4   -> LCD_print
        4   -> parse_command
        4   -> parse_test
        0   -> read_into_buffer
        4   -> strncpy
     14   parse_command
       12   -> LCD_print
       12   -> Left_Motor_ON_FORWARD
       12   -> Left_Motor_ON_REVERSE
       12   -> Right_Motor_ON_FORWARD
       12   -> Right_Motor_ON_REVERSE
       12 ?DivMod16s
      4   parse_test
        4   -> transmit_charA0
      4   read_into_buffer
      4   transmit_charA0
      4   transmit_charA3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   ncsu   ">
      11  ?<Constant " Gotta go ">
      11  ?<Constant " MSP430 JR">
      11  ?<Constant " _______  ">
      11  ?<Constant "----------">
      11  ?<Constant "/^_____^\\ ">
       9  ?<Constant "115200\r\n">
       9  ?<Constant "460800\r\n">
      11  ?<Constant "<<<<<<<<<<">
      11  ?<Constant ">>>>>>>>>>">
      11  ?<Constant "Dank memes">
      11  ?<Constant "Happy Car ">
      11  ?<Constant "Look both ">
      11  ?<Constant "Now w/ 2x ">
      11  ?<Constant "Samic fast">
      11  ?<Constant "\\_______/ ">
      11  ?<Constant "black line">
      11  ?<Constant "crossin da">
      11  ?<Constant "ways bfore">
       2  ?<Initializer for higher_baud>
       1  ?<Initializer for iot_status_reg>
       2  ?<Initializer for lower_baud>
      16  IOT_Char_Rx
      11  IP_line1
      11  IP_line2
       8  Init_Serial
      38  Init_Serial_UCA0
      38  Init_Serial_UCA3
      16  Main_Char_Rx
      32  USCI_A0_ISR
       2  USCI_A0_ISR::??INTVEC 96
     140  USCI_A3_ISR
       2  USCI_A3_ISR::??INTVEC 48
       2  _A_PCOUT_L
       2  _A_PDOUT_L
       2  _A_UCA0BRW_L
       2  _A_UCA0CTLW0_L
       2  _A_UCA0IE_L
       2  _A_UCA0IFG_L
       2  _A_UCA0IV_L
       2  _A_UCA0MCTLW_L
       2  _A_UCA0RXBUF_L
       2  _A_UCA0STATW_L
       2  _A_UCA0TXBUF_L
       2  _A_UCA3BRW_L
       2  _A_UCA3CTLW0_L
       2  _A_UCA3IE_L
       2  _A_UCA3IFG_L
       2  _A_UCA3IV_L
       2  _A_UCA3MCTLW_L
       2  _A_UCA3RXBUF_L
       2  _A_UCA3STATW_L
       2  _A_UCA3TXBUF_L
       1  chars_to_read
     138  check_for_input
       2  higher_baud
       1  iot_status_reg
       1  iot_tx_wr
       1  left_direction
       1  left_pwm
       2  lower_baud
       1  main_ring_rd
     604  parse_command
     112  parse_test
      88  read_into_buffer
       1  right_direction
       1  right_pwm
       1  rx_wr_temp
      14  transmit_charA0
      14  transmit_charA3

 
 1 054 bytes in segment CODE
    40 bytes in segment DATA16_AN
   216 bytes in segment DATA16_C
     5 bytes in segment DATA16_I
     5 bytes in segment DATA16_ID
    62 bytes in segment DATA16_Z
     4 bytes in segment INTVEC
   172 bytes in segment ISR_CODE
 
 1 226 bytes of CODE  memory
   221 bytes of CONST memory (+  4 bytes shared)
    67 bytes of DATA  memory (+ 40 bytes shared)

Errors: none
Warnings: none
