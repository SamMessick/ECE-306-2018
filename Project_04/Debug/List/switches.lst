###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           02/Feb/2018  12:37:22
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\switches.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW553F.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\switches.c"
#        -lC "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\List"
#        -o "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\List\switches.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\Obj\switches.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\switches.c
      1          //===============================================================
      2          //  File Name: switches.c
      3          //  Description: This file contains the functions needed for button
      4          //                    operation of the LCD, wheels and LEDs
      5          //
      6          //  Author: Sam Messick
      7          //  Date Feb. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "switches.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x240
   \   union <unnamed> _A_PCIN_L
   \                     _A_PCIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x244
   \   union <unnamed> _A_PCDIR_L
   \                     _A_PCDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t left_forward_flag
   \                     left_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t left_reverse_flag
   \                     left_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t right_forward_flag
   \                     right_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t right_reverse_flag
   \                     right_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t flag_RED_LED_ON
   \                     flag_RED_LED_ON:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t flag_GRN_LED_ON
   \                     flag_GRN_LED_ON:
   \   000000                DS8 1
     12          
     13          //Enable right switch

   \                                 In  segment CODE, align 2
     14          void enable_switch_BUTTON1(void){
   \                     enable_switch_BUTTON1:
     15            P5OUT |= BUTTON1;                     // Select pull up resistor
   \   000000   F2D040004202 BIS.B   #0x40, &0x242
     16            P5DIR &= ~BUTTON1;                    // Set direction to input
   \   000006   F2C040004402 BIC.B   #0x40, &0x244
     17          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCOUT_L
   \   00000E                REQUIRE _A_PCDIR_L
     18          
     19          // Enable left switch

   \                                 In  segment CODE, align 2
     20          void enable_switch_BUTTON2(void){
   \                     enable_switch_BUTTON2:
     21            P5OUT |= BUTTON2;                     // Select pull up resistor
   \   000000   F2D020004202 BIS.B   #0x20, &0x242
     22            P5DIR &= ~BUTTON2;                    // Set direction to input
   \   000006   F2C020004402 BIC.B   #0x20, &0x244
     23          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCOUT_L
   \   00000E                REQUIRE _A_PCDIR_L
     24          //----------------------------------------------------------------
     25          // Begin with switches enabled

   \                                 In  segment CODE, align 2
     26          void Init_Switches(void){               
   \                     Init_Switches:
     27            enable_switch_BUTTON1();
   \   000000   ........     CALLA   #enable_switch_BUTTON1
     28            enable_switch_BUTTON2();
   \   000004   ........     BRA     #enable_switch_BUTTON2
     29          }
     30          //----------------------------------------------------------------

   \                                 In  segment CODE, align 2
     31          void disable_switch_BUTTON1(void){
   \                     disable_switch_BUTTON1:
     32            P5DIR |= BUTTON1;                     // Set direction to output
   \   000000   F2D040004402 BIS.B   #0x40, &0x244
     33            P5OUT &= ~BUTTON1;                    // Set output to low
   \   000006   F2C040004202 BIC.B   #0x40, &0x242
     34          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCDIR_L
   \   00000E                REQUIRE _A_PCOUT_L

   \                                 In  segment CODE, align 2
     35          void disable_switch_BUTTON2(void){
   \                     disable_switch_BUTTON2:
     36            P5DIR |= BUTTON2;                     // Set direction to output
   \   000000   F2D020004402 BIS.B   #0x20, &0x244
     37            P5OUT &= ~BUTTON2;                    // Set output to low
   \   000006   F2C020004202 BIC.B   #0x20, &0x242
     38          }
   \   00000C   1001         RETA
   \   00000E                REQUIRE _A_PCDIR_L
   \   00000E                REQUIRE _A_PCOUT_L
     39          //----------------------------------------------------------------

   \                                 In  segment CODE, align 2
     40          void Switch1_Process(void){
   \                     Switch1_Process:
   \   000000   0A12         PUSH.W  R10
     41            switch(flag_RED_LED_ON)
   \   000002   5E42....     MOV.B   &flag_RED_LED_ON, R14
   \   000006   4E83         SUB.B   #0x0, R14
   \   000008   0324         JEQ     ??Switch1_Process_2
   \   00000A   5E83         SUB.B   #0x1, R14
   \   00000C   2324         JEQ     ??Switch1_Process_3
   \   00000E   2A3C         JMP     ??Switch1_Process_0
     42            {
     43            case false:
     44              switch(!(P5IN & BUTTON1))
   \                     ??Switch1_Process_2:
   \   000010   F2B040004002 BIT.B   #0x40, &0x240
   \   000016   262C         JC      ??Switch1_Process_0
     45              {
     46              case true:
     47                P1OUT |= RED_LED;
   \   000018   D2D30202     BIS.B   #0x1, &0x202
     48                menu_counter += PENULT_OPTION;
   \   00001C   E252....     ADD.B   #0x4, &menu_counter
     49                menu_counter %= MENU_NUM_OPTIONS;
   \   000020   3A400500     MOV.W   #0x5, R10
   \   000024   5C42....     MOV.B   &menu_counter, R12
   \   000028   8C11         SXT     R12
   \   00002A   3CF3         AND.W   #0xffff, R12
   \   00002C   0E4A         MOV.W   R10, R14
   \   00002E   ........     CALLA   #?DivMod16s
   \   000032   0212         PUSH.W  SR
   \   000034   32C2         DINT
   \   000036   0343         NOP
   \   000038   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   00003C   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   000040   D282........ SUB.B   &__iar_HWMUL + 10, &menu_counter // RESLO
   \   000046   0343         NOP
   \   000048   3241         POP.W   SR
     50                flag_RED_LED_ON = 1;
   \   00004A   D243....     MOV.B   #0x1, &flag_RED_LED_ON
     51                update_menu();
   \   00004E   ........     CALLA   #update_menu
     52              default:
     53                break;
     54              }
     55              break;
   \   000052   083C         JMP     ??Switch1_Process_0
     56              
     57            case true:
     58              switch(!(P5IN & BUTTON1))
   \                     ??Switch1_Process_3:
   \   000054   F2B040004002 BIT.B   #0x40, &0x240
   \   00005A   0428         JNC     ??Switch1_Process_0
     59              {
     60              case false:
     61                P1OUT &= ~RED_LED;
   \   00005C   D2C30202     BIC.B   #0x1, &0x202
     62                flag_RED_LED_ON = 0;
   \   000060   C243....     MOV.B   #0x0, &flag_RED_LED_ON
     63              default:
     64                break;
     65              }
     66              break;
     67            }
     68          }
   \                     ??Switch1_Process_0:
   \   000064   3A41         POP.W   R10
   \   000066   1001         RETA
   \   000068                REQUIRE _A_PAOUT_L
   \   000068                REQUIRE _A_PCIN_L

   \                                 In  segment CODE, align 2
     69          void Switch2_Process(void){
   \                     Switch2_Process:
   \   000000   0A12         PUSH.W  R10
     70            switch(flag_GRN_LED_ON)               // Check if green LED is on
   \   000002   5E42....     MOV.B   &flag_GRN_LED_ON, R14
   \   000006   4E83         SUB.B   #0x0, R14
   \   000008   0324         JEQ     ??Switch2_Process_2
   \   00000A   5E83         SUB.B   #0x1, R14
   \   00000C   2324         JEQ     ??Switch2_Process_3
   \   00000E   2A3C         JMP     ??Switch2_Process_0
     71            {
     72            case false:
     73              switch(!(P5IN & BUTTON2))           // Green LED off; check if button 2 is pushed
   \                     ??Switch2_Process_2:
   \   000010   F2B020004002 BIT.B   #0x20, &0x240
   \   000016   262C         JC      ??Switch2_Process_0
     74              {
     75              case true:                          // button 2 is pushed; turn on green LED
     76                P1OUT |= GRN_LED;                 
   \   000018   E2D30202     BIS.B   #0x2, &0x202
     77                menu_counter++;
   \   00001C   D253....     ADD.B   #0x1, &menu_counter
     78                menu_counter %= MENU_NUM_OPTIONS;
   \   000020   3A400500     MOV.W   #0x5, R10
   \   000024   5C42....     MOV.B   &menu_counter, R12
   \   000028   8C11         SXT     R12
   \   00002A   3CF3         AND.W   #0xffff, R12
   \   00002C   0E4A         MOV.W   R10, R14
   \   00002E   ........     CALLA   #?DivMod16s
   \   000032   0212         PUSH.W  SR
   \   000034   32C2         DINT
   \   000036   0343         NOP
   \   000038   C24C....     MOV.B   R12, &__iar_HWMUL              // MPY
   \   00003C   C24A....     MOV.B   R10, &__iar_HWMUL + 8          // OP2
   \   000040   D282........ SUB.B   &__iar_HWMUL + 10, &menu_counter // RESLO
   \   000046   0343         NOP
   \   000048   3241         POP.W   SR
     79                update_menu();
   \   00004A   ........     CALLA   #update_menu
     80                flag_GRN_LED_ON = 1;
   \   00004E   D243....     MOV.B   #0x1, &flag_GRN_LED_ON
     81                
     82              default:
     83                break;
     84              }
     85              break;
   \   000052   083C         JMP     ??Switch2_Process_0
     86              
     87            case true:                            // Green LED on; check if button 2 is pushed
     88              switch(!(P5IN & BUTTON2))
   \                     ??Switch2_Process_3:
   \   000054   F2B020004002 BIT.B   #0x20, &0x240
   \   00005A   0428         JNC     ??Switch2_Process_0
     89              {
     90              case false:                         // button 2 is not pushed; turn off green LED
     91                P1OUT &= ~GRN_LED;
   \   00005C   E2C30202     BIC.B   #0x2, &0x202
     92                flag_GRN_LED_ON = 0;
   \   000060   C243....     MOV.B   #0x0, &flag_GRN_LED_ON
     93                break;
     94              default:
     95                break;
     96              }
     97              break;
     98            }
     99          }
   \                     ??Switch2_Process_0:
   \   000064   3A41         POP.W   R10
   \   000066   1001         RETA
   \   000068                REQUIRE _A_PAOUT_L
   \   000068                REQUIRE _A_PCIN_L

   \                                 In  segment CODE, align 2
    100          void Switches_Process(void){
   \                     Switches_Process:
    101            Switch1_Process();
   \   000000   ........     CALLA   #Switch1_Process
    102            Switch2_Process();
   \   000004   ........     BRA     #Switch2_Process
    103          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Switches
        4   -> enable_switch_BUTTON1
        0   -> enable_switch_BUTTON2
      8   Switch1_Process
        6   -> update_menu
        6 ?DivMod16s
      8   Switch2_Process
        6   -> update_menu
        6 ?DivMod16s
      4   Switches_Process
        4   -> Switch1_Process
        0   -> Switch2_Process
      4   disable_switch_BUTTON1
      4   disable_switch_BUTTON2
      4   enable_switch_BUTTON1
      4   enable_switch_BUTTON2


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  Init_Switches
     104  Switch1_Process
     104  Switch2_Process
       8  Switches_Process
       2  _A_PAOUT_L
       2  _A_PCDIR_L
       2  _A_PCIN_L
       2  _A_PCOUT_L
      14  disable_switch_BUTTON1
      14  disable_switch_BUTTON2
      14  enable_switch_BUTTON1
      14  enable_switch_BUTTON2
       1  flag_GRN_LED_ON
       1  flag_RED_LED_ON
       1  left_forward_flag
       1  left_reverse_flag
       1  right_forward_flag
       1  right_reverse_flag

 
 280 bytes in segment CODE
   8 bytes in segment DATA16_AN
   6 bytes in segment DATA16_Z
 
 280 bytes of CODE memory
   6 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
