###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           01/Feb/2018  14:04:42
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\main.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EWE9E8.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\main.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR5994__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\Debug\List\main.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\Project_04\Debug\Obj\main.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\Project_04\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          //------------------------------------------------------------------------------
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include "macros.h"
     15          #include "enums.h"
     16          #include "ports.h"
     17          #include <string.h>
     18          #include <stdbool.h>
     19          #include <stdint.h>
     20          
     21          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     23          extern char display_line[LINE_NUM_LINES][COLUMN_NUM_COLUMNS];
     24          extern char *display[LINE_NUM_LINES];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     26          extern volatile unsigned char display_changed;
     27          extern volatile unsigned char update_display;
     28          extern volatile unsigned int update_display_count;
     29          extern volatile unsigned int Time_Sequence;
     30          extern volatile char one_time;
     31          

   \                                 In  segment CODE, align 2
     32          void main(void){
   \                     main:
     33          //------------------------------------------------------------------------------
     34          // Main Program
     35          // This is the main routine for the program. Execution of code starts here.
     36          // The operating system is Back Ground Fore Ground.
     37          //
     38          //------------------------------------------------------------------------------
     39            Init_Ports();                        // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     40          // Disable the GPIO power-on default high-impedance mode to activate
     41          // previously configured port settings
     42            PM5CTL0 &= ~LOCKLPM5;
   \   000004   92C33001     BIC.W   #0x1, &0x130
     43            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     44            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     45            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     46            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     47          
     48          // Place the contents of what you want on the display, in between the quotes
     49          // Limited to 10 characters per line
     50          //
     51          
     52            strcpy(display_line[LINE1], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     53            update_string(display_line[LINE1], LINE1);
   \   000024   0D43         MOV.W   #0x0, R13
   \   000026   ........     CALLA   #update_string
     54            strcpy(display_line[LINE2], "Sam M. Car");
   \   00002A   3D40....     MOV.W   #`?<Constant "Sam M. Car">`, R13
   \   00002E   3C40....     MOV.W   #display_line + 11, R12
   \   000032   ........     CALLA   #strcpy
     55            update_string(display_line[LINE2], LINE2);
   \   000036   1D43         MOV.W   #0x1, R13
   \   000038   3C40....     MOV.W   #display_line + 11, R12
   \   00003C   ........     CALLA   #update_string
     56            strcpy(display_line[LINE4], "  ECE306  ");
   \   000040   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   000044   3C40....     MOV.W   #display_line + 33, R12
   \   000048   ........     CALLA   #strcpy
     57            update_string(display_line[LINE4], LINE4);
   \   00004C   3D400300     MOV.W   #0x3, R13
   \   000050   3C40....     MOV.W   #display_line + 33, R12
   \   000054   ........     CALLA   #update_string
     58            enable_display_update();
   \   000058   ........     CALLA   #enable_display_update
     59          //  Display_Update(3,1,0,0);
     60          
     61          //------------------------------------------------------------------------------
     62          // Begining of the "While" Operating System
     63          //------------------------------------------------------------------------------
     64            while(ALWAYS) {                      // Can the Operating system run
     65              switch(Time_Sequence){
   \                     ??main_0:
   \   00005C   1F42....     MOV.W   &Time_Sequence, R15
   \   000060   3F801900     SUB.W   #0x19, R15
   \   000064   3824         JEQ     ??main_7
   \   000066   3F801900     SUB.W   #0x19, R15
   \   00006A   2924         JEQ     ??main_8
   \   00006C   3F801900     SUB.W   #0x19, R15
   \   000070   1C24         JEQ     ??main_9
   \   000072   3F801900     SUB.W   #0x19, R15
   \   000076   1124         JEQ     ??main_10
   \   000078   3F801900     SUB.W   #0x19, R15
   \   00007C   3520         JNE     ??main_6
     66                case CASE5:                        // 1000 msec
     67                  if(one_time){
   \   00007E   C293....     CMP.B   #0x0, &one_time
   \   000082   0824         JEQ     ??main_11
     68                    Init_LEDs();
   \   000084   ........     CALLA   #Init_LEDs
     69                    lcd_BIG_mid();
   \   000088   ........     CALLA   #lcd_BIG_mid
     70                    display_changed = true;
   \   00008C   D243....     MOV.B   #0x1, &display_changed
     71                    one_time = false;
   \   000090   C243....     MOV.B   #0x0, &one_time
     72                  }
     73                  Time_Sequence = true;             //
   \                     ??main_11:
   \   000094   9243....     MOV.W   #0x1, &Time_Sequence
     74                  break;
   \   000098   273C         JMP     ??main_6
     75                case CASE4:                        // 1000 msec
     76                  if(one_time){
   \                     ??main_10:
   \   00009A   C293....     CMP.B   #0x0, &one_time
   \   00009E   2424         JEQ     ??main_6
     77                    P1OUT |= GRN_LED;            // Change State of LED 5
   \   0000A0   E2D30202     BIS.B   #0x2, &0x202
     78                    one_time = false;
   \   0000A4   C243....     MOV.B   #0x0, &one_time
     79                  }
     80                  break;
   \   0000A8   1F3C         JMP     ??main_6
     81                case CASE3:                         // 750 msec
     82                  if(one_time){
   \                     ??main_9:
   \   0000AA   C293....     CMP.B   #0x0, &one_time
   \   0000AE   1C24         JEQ     ??main_6
     83                    P1OUT |= RED_LED;            // Change State of LED 4
   \   0000B0   D2D30202     BIS.B   #0x1, &0x202
     84                    P1OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000B4   E2C30202     BIC.B   #0x2, &0x202
     85                    one_time = false;
   \   0000B8   C243....     MOV.B   #0x0, &one_time
     86                  }
     87                  break;
   \   0000BC   153C         JMP     ??main_6
     88                case CASE2:                         // 500 msec
     89                  if(one_time){
   \                     ??main_8:
   \   0000BE   C293....     CMP.B   #0x0, &one_time
   \   0000C2   1224         JEQ     ??main_6
     90                    lcd_4line();
   \   0000C4   ........     CALLA   #lcd_4line
     91                    P1OUT |= GRN_LED;            // Change State of LED 5
   \   0000C8   E2D30202     BIS.B   #0x2, &0x202
     92                    display_changed = true;
   \   0000CC   D243....     MOV.B   #0x1, &display_changed
     93                    one_time = false;
   \   0000D0   C243....     MOV.B   #0x0, &one_time
     94                  }
     95                  break;
   \   0000D4   093C         JMP     ??main_6
     96                case  CASE1:                        // 250 msec
     97                  if(one_time){
   \                     ??main_7:
   \   0000D6   C293....     CMP.B   #0x0, &one_time
   \   0000DA   0624         JEQ     ??main_6
     98                    P1OUT &= ~RED_LED;           // Change State of LED 4
   \   0000DC   D2C30202     BIC.B   #0x1, &0x202
     99                    P1OUT &= ~GRN_LED;           // Change State of LED 5
   \   0000E0   E2C30202     BIC.B   #0x2, &0x202
    100                    one_time = false;
   \   0000E4   C243....     MOV.B   #0x0, &one_time
    101                  }
    102                  break;                         //
    103                default: break;
    104              }
    105              Switches_Process();                // Check for switch state change
   \                     ??main_6:
   \   0000E8   ........     CALLA   #Switches_Process
    106              Display_Process();
   \   0000EC   ........     CALLA   #Display_Process
    107              
    108              updateBacklight();
                     ^
Warning[Pe223]: function "updateBacklight" declared implicitly
   \   0000F0   ........     CALLA   #updateBacklight
   \   0000F4   B33F         JMP     ??main_0
   \   0000F6   0343         NOP
   \   0000F8                REQUIRE _A_PM5CTL0_L
   \   0000F8                REQUIRE _A_PAOUT_L
    109            }
    110          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Sam M. Car">`:
   \   000000   53616D204D2E DC8 "Sam M. Car"
   \            2043617200  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  
    111          //------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> lcd_4line
        4   -> lcd_BIG_mid
        4   -> strcpy
        4   -> updateBacklight
        4   -> update_string


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      11  ?<Constant "Sam M. Car">
       2  _A_PAOUT_L
       2  _A_PM5CTL0_L
       1  display_mode
     248  main
       1  slow_input_down

 
 248 bytes in segment CODE
   4 bytes in segment DATA16_AN
  33 bytes in segment DATA16_C
   2 bytes in segment DATA16_Z
 
 248 bytes of CODE  memory
  33 bytes of CONST memory
   2 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
