###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           02/Feb/2018  12:37:22
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\main.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW54A2.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\main.c"
#        -lC "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\List"
#        -o "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\List\main.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\Debug\Obj\main.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306-When-Shit-Got-Real\Project_04\main.c
      1          //------------------------------------------------------------------------------
      2          //  File name: main.c
      3          //  Description: This file contains the MSP430 Car's Operating System
      4          //
      5          //
      6          //  Sam Messick
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include "main.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t left_forward_flag
   \                     left_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t left_reverse_flag
   \                     left_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t right_forward_flag
   \                     right_forward_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   uint8_t right_reverse_flag
   \                     right_reverse_flag:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   char volatile slow_input_down
   \                     slow_input_down:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \   unsigned char display_mode
   \                     display_mode:
   \   000000                DS8 1
     12          

   \                                 In  segment CODE, align 2
     13          void main(void){
   \                     main:
     14          //------------------------------------------------------------------------------
     15          // Main Program
     16          // This is the main routine for the program. Execution of code starts here.
     17          // The operating system is Back Ground Fore Ground.
     18          //
     19          //------------------------------------------------------------------------------
     20            Init_Ports();                        // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     21          // Disable the GPIO power-on default high-impedance mode to activate
     22          // previously configured port settings
     23            PM5CTL0 &= ~LOCKLPM5;
   \   000004   92C33001     BIC.W   #0x1, &0x130
     24            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     25            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     26            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     27            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     28            Init_LEDs();
   \   000018   ........     CALLA   #Init_LEDs
     29          
     30          // Update LCD display
     31            update_menu();
   \   00001C   ........     CALLA   #update_menu
     32            enable_display_update();
   \   000020   ........     CALLA   #enable_display_update
     33          //  Display_Update(3,1,0,0);
     34          
     35          //------------------------------------------------------------------------------
     36          // Begining of the "While" Operating System
     37          //------------------------------------------------------------------------------
     38            while(true) {                      // Can the Operating system run
     39              switch(Time_Sequence){
   \                     ??main_0:
   \   000024   1F42....     MOV.W   &Time_Sequence, R15
   \   000028   3F801900     SUB.W   #0x19, R15
   \   00002C   2E24         JEQ     ??main_7
   \   00002E   3F801900     SUB.W   #0x19, R15
   \   000032   2124         JEQ     ??main_8
   \   000034   3F801900     SUB.W   #0x19, R15
   \   000038   1824         JEQ     ??main_9
   \   00003A   3F801900     SUB.W   #0x19, R15
   \   00003E   0F24         JEQ     ??main_10
   \   000040   3F801900     SUB.W   #0x19, R15
   \   000044   2720         JNE     ??main_6
     40                case CASE5:                        // 1000 msec
     41                  if(one_time){
   \   000046   C293....     CMP.B   #0x0, &one_time
   \   00004A   0624         JEQ     ??main_11
     42                    lcd_BIG_mid();
   \   00004C   ........     CALLA   #lcd_BIG_mid
     43                    display_changed = true;
   \   000050   D243....     MOV.B   #0x1, &display_changed
     44                    one_time = false;
   \   000054   C243....     MOV.B   #0x0, &one_time
     45                  }
     46                  Time_Sequence = true;             //
   \                     ??main_11:
   \   000058   9243....     MOV.W   #0x1, &Time_Sequence
     47                  break;
   \   00005C   1B3C         JMP     ??main_6
     48                case CASE4:                        // 1000 msec
     49                  if(one_time){
   \                     ??main_10:
   \   00005E   C293....     CMP.B   #0x0, &one_time
   \   000062   1824         JEQ     ??main_6
     50                    one_time = false;
   \   000064   C243....     MOV.B   #0x0, &one_time
     51                  }
     52                  break;
   \   000068   153C         JMP     ??main_6
     53                case CASE3:                         // 750 msec
     54                  if(one_time){
   \                     ??main_9:
   \   00006A   C293....     CMP.B   #0x0, &one_time
   \   00006E   1224         JEQ     ??main_6
     55                    one_time = false;
   \   000070   C243....     MOV.B   #0x0, &one_time
     56                  }
     57                  break;
   \   000074   0F3C         JMP     ??main_6
     58                case CASE2:                         // 500 msec
     59                  if(one_time){
   \                     ??main_8:
   \   000076   C293....     CMP.B   #0x0, &one_time
   \   00007A   0C24         JEQ     ??main_6
     60                    lcd_4line();
   \   00007C   ........     CALLA   #lcd_4line
     61                    display_changed = true;
   \   000080   D243....     MOV.B   #0x1, &display_changed
     62                    one_time = false;
   \   000084   C243....     MOV.B   #0x0, &one_time
     63                  }
     64                  break;
   \   000088   053C         JMP     ??main_6
     65                case  CASE1:                        // 250 msec
     66                  if(one_time){
   \                     ??main_7:
   \   00008A   C293....     CMP.B   #0x0, &one_time
   \   00008E   0224         JEQ     ??main_6
     67                    one_time = false;
   \   000090   C243....     MOV.B   #0x0, &one_time
     68                  }
     69                  break;                         //
     70                default: break;
     71              }
     72              Switches_Process();                // Check for switch state change
   \                     ??main_6:
   \   000094   ........     CALLA   #Switches_Process
     73              Display_Process();
   \   000098   ........     CALLA   #Display_Process
   \   00009C   C33F         JMP     ??main_0
   \   00009E   0343         NOP
   \   0000A0                REQUIRE _A_PM5CTL0_L
     74            }
     75          }
     76          //------------------------------------------------------------------------------

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Switches_Process
        4   -> enable_display_update
        4   -> lcd_4line
        4   -> lcd_BIG_mid
        4   -> update_menu


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PM5CTL0_L
       1  display_mode
       1  left_forward_flag
       1  left_reverse_flag
     160  main
       1  right_forward_flag
       1  right_reverse_flag
       1  slow_input_down

 
 160 bytes in segment CODE
   2 bytes in segment DATA16_AN
   6 bytes in segment DATA16_Z
 
 160 bytes of CODE memory
   6 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
