###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           20/Mar/2018  20:40:48
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\timerA0.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW431A.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\timerA0.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\Debug\List\timerA0.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_07\Debug\Obj\timerA0.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_07\timerA0.c
      1          //===============================================================
      2          //  File Name: timerA1.c
      3          //  Description: This file contains the initialization of timer
      4          //                    A1--the variable millisecond timer--and the 
      5          //                    LCD refresh routine.
      6          //
      7          //  Author: Sam Messick
      8          //  Date Feb. 2018
      9          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
     10          //===============================================================
     11          
     12          #include "timerA0.h"

   \                                 In  segment DATA16_AN, at 0x340
   \   union <unnamed> _A_TA0CTL_L
   \                     _A_TA0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   union <unnamed> _A_TA0CCTL0_L
   \                     _A_TA0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x344
   \   union <unnamed> _A_TA0CCTL1_L
   \                     _A_TA0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x346
   \   union <unnamed> _A_TA0CCTL2_L
   \                     _A_TA0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   union <unnamed> _A_TA0CCR0_L
   \                     _A_TA0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x354
   \   union <unnamed> _A_TA0CCR1_L
   \                     _A_TA0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x356
   \   union <unnamed> _A_TA0CCR2_L
   \                     _A_TA0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x36e
   \   union <unnamed> _A_TA0IV_L
   \                     _A_TA0IV_L:
   \   000000                DS8 2
     13          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          uint16_t counter_A01;           // Timer A1.1 interrupt occurences counter (range 0 - 1000)
   \                     counter_A01:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          uint16_t counter_A02;           // Timer A1.2 interrupt occurences counter (range 0 - 1000)
   \                     counter_A02:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile uint16_t delay_time;         // Timer A1.2 counter assignment -- receives input from main
   \                     delay_time:
   \   000000                DS8 2
     17          

   \                                 In  segment CODE, align 2
     18          void Init_Timer_A0(void) {
   \                     Init_Timer_A0:
     19            // Initialize Timer A1 and activate display update
     20            TA0CTL = TASSEL__ACLK;
   \   000000   B24000014003 MOV.W   #0x100, &0x340
     21            TA0CTL |= (TACLR | MC_1 | ID_1);       // SMCLK Clock source on up mode at 1 MHz
   \   000006   B2D054004003 BIS.W   #0x54, &0x340
     22            TA0CTL |= TAIDEX__1;
   \   00000C   924240034003 MOV.W   &0x340, &0x340
     23            TA0CCR0 = MSEC;                        // interrupt time set to 1/1000 second
   \   000012   B24099195203 MOV.W   #0x1999, &0x352
     24            TA0CCR1 = MSEC;                        // interrupt time set to 1/1000 second
   \   000018   B24099195403 MOV.W   #0x1999, &0x354
     25            TA0CCR2 = MSEC;                        // interrupt time set to 1/1000 second
   \   00001E   B24099195603 MOV.W   #0x1999, &0x356
     26            
     27            //TA0CCTL0 |= CCIE;                      // Enable clock interrupts every 1/1000 second
     28            TA0CTL &= ~(TAIFG);                    // Clear Timer A1 interrupt flag and interrupt enable
   \   000024   92C34003     BIC.W   #0x1, &0x340
     29            TA0CCTL0 |= CCIE;
   \   000028   B2D010004203 BIS.W   #0x10, &0x342
     30          }
   \   00002E   1001         RETA
   \   000030                REQUIRE _A_TA0CTL_L
   \   000030                REQUIRE _A_TA0CCR0_L
   \   000030                REQUIRE _A_TA0CCR1_L
   \   000030                REQUIRE _A_TA0CCR2_L
   \   000030                REQUIRE _A_TA0CCTL0_L
     31          
     32          ////////////////////////////////////
     33          //Interrupt timer update functions//
     34          /////////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2
     35          void handle_quart_second_delay(void){
   \                     handle_quart_second_delay:
     36            // Debouncing delay for Buttons 1 and 2
     37            counter_A01++;                         // Increment debounce counter by 1 msec
   \   000000   9253....     ADD.W   #0x1, &counter_A01
     38            if(!(counter_A01 % QUART_SEC))   // **If debounce counter has counter 250 msec
   \   000004   3E400500     MOV.W   #0x5, R14
   \   000008   1C42....     MOV.W   &counter_A01, R12
   \   00000C   ........     CALLA   #?DivMod16u
   \   000010   0E93         CMP.W   #0x0, R14
   \   000012   0920         JNE     ??handle_quart_second_delay_0
     39            {
     40              TA0CCTL1 &= ~CCIE;                   //     Disable debounce delay routine                 
   \   000014   B2C010004403 BIC.W   #0x10, &0x344
     41              counter_A01 = COUNTER_RESET;         //     reset timer A11 counter 
   \   00001A   8243....     MOV.W   #0x0, &counter_A01
     42              debounced = true;                    //     Allow switch to reactivate button interrupt routine
   \   00001E   D243....     MOV.B   #0x1, &debounced
     43              defer_to_shape_menu();                       //     Update menu state machine
   \   000022   ........     CALLA   #defer_to_shape_menu
     44            }
     45          }
   \                     ??handle_quart_second_delay_0:
   \   000026   1001         RETA
   \   000028                REQUIRE _A_TA0CCTL1_L
     46          

   \                                 In  segment CODE, align 2
     47          void handle_procedural_delay(void){     
   \                     handle_procedural_delay:
     48            // General delay for menu state machine
     49            counter_A02++;                         // Increment delay counter by 1msec
   \   000000   9253....     ADD.W   #0x1, &counter_A02
     50            if(!(counter_A02 % delay_time))        // **If debounce counter has counter of delay_time msec
   \   000004   1E42....     MOV.W   &delay_time, R14
   \   000008   1C42....     MOV.W   &counter_A02, R12
   \   00000C   ........     CALLA   #?DivMod16u
   \   000010   0E93         CMP.W   #0x0, R14
   \   000012   0920         JNE     ??handle_procedural_delay_0
     51            {
     52              TA0CCTL2 &= ~CCIE;                   //     Disable procedural delay routine                
   \   000014   B2C010004603 BIC.W   #0x10, &0x346
     53              counter_A02 = COUNTER_RESET;         //     Reset timer A11 counter
   \   00001A   8243....     MOV.W   #0x0, &counter_A02
     54              delay_time  = COUNTER_RESET;         //     Reset delay_time to 0 msec
   \   00001E   8243....     MOV.W   #0x0, &delay_time
     55              defer_to_shape_menu();                       //     Enable pending menu state machine instruction
   \   000022   ........     CALLA   #defer_to_shape_menu
     56            }
     57          }
   \                     ??handle_procedural_delay_0:
   \   000026   1001         RETA
   \   000028                REQUIRE _A_TA0CCTL2_L
     58          //////////////////////////////////////////////////////////////////////////////////////////////////
     59          
     60          
     61          //   Timer A1.0 interrupt routine  //
     62          // ------LCD Display Updater------ //
     63          #pragma vector = TIMER0_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     64          __interrupt void Timer0_A0_ISR(void){
   \                     Timer0_A0_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     65            static uint16_t counter_A00;           // 1 msec counting interval for Timer A1.0
     66            counter_A00++;                         // Increment counter by 1 msec for each 1 msec interrupt
   \   000002   9253....     ADD.W   #0x1, &??counter_A00
     67            if(counter_A00 % QUART_SEC)            // Quarter-second elapsed
   \   000006   3E400500     MOV.W   #0x5, R14
   \   00000A   1C42....     MOV.W   &??counter_A00, R12
   \   00000E   ........     CALLA   #?DivMod16u
   \   000012   0E93         CMP.W   #0x0, R14
   \   000014   0424         JEQ     ??Timer0_A0_ISR_0
     68            {
     69              print_detector_values();
   \   000016   ........     CALLA   #print_detector_values
     70              counter_A00 = COUNTER_RESET;         // Reset 1 msec interrupt counter
   \   00001A   8243....     MOV.W   #0x0, &??counter_A00
     71            }
     72          }
   \                     ??Timer0_A0_ISR_0:
   \   00001E   3C17         POPM.W  #0x4, R15
   \   000020   0013         RETI

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ??counter_A00:
   \   000000                DS8 2
     73          
     74          //   Timer A1 interrupt routines   //
     75          //         **OVERFLOW**            //
     76          // ------.25 second delay--------- // <-- Highest Priority (debounce)
     77          // ----- Procedural delay -------- //                      (pauses for delay_time in msecs)
     78          #pragma vector = TIMER0_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     79          __interrupt void Timer0_A1_ISR(void){
   \                     Timer0_A1_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     80            // Check and handle interrupt vector
     81            switch(TA0IV)
   \   000002   1F426E03     MOV.W   &0x36e, R15
   \   000006   2F83         SUB.W   #0x2, R15
   \   000008   0524         JEQ     ??Timer0_A1_ISR_1
   \   00000A   2F83         SUB.W   #0x2, R15
   \   00000C   0624         JEQ     ??Timer0_A1_ISR_2
   \   00000E   2F83         SUB.W   #0x2, R15
   \   000010   0724         JEQ     ??Timer0_A1_ISR_3
   \   000012   0A3C         JMP     ??Timer0_A1_ISR_0
     82            {
     83            case TA0IV_1:                                   // ------Button Press Debounce------ //
     84              handle_quart_second_delay();
   \                     ??Timer0_A1_ISR_1:
   \   000014   ........     CALLA   #handle_quart_second_delay
     85              break;
   \   000018   073C         JMP     ??Timer0_A1_ISR_0
     86            case TA0IV_2:                                   // ------ Procedural Delay---------- // 
     87              handle_procedural_delay();
   \                     ??Timer0_A1_ISR_2:
   \   00001A   ........     CALLA   #handle_procedural_delay
     88              break;
   \   00001E   043C         JMP     ??Timer0_A1_ISR_0
     89            case (TA0IV_1 | TA0IV_2):                       // Procedural delay and button press //
     90              handle_quart_second_delay();
   \                     ??Timer0_A1_ISR_3:
   \   000020   ........     CALLA   #handle_quart_second_delay
     91              handle_procedural_delay();
   \   000024   ........     CALLA   #handle_procedural_delay
     92            }
     93            TA0CTL &= ~(TAIFG);                             // Update Timer A1.1-2 interrupt queue
   \                     ??Timer0_A1_ISR_0:
   \   000028   92C34003     BIC.W   #0x1, &0x340
     94          }
   \   00002C   3C17         POPM.W  #0x4, R15
   \   00002E   0013         RETI
   \   000030                REQUIRE _A_TA0IV_L
   \   000030                REQUIRE _A_TA0CTL_L

   \                                 In  segment INTVEC, offset 0x58, root
   \                     `??Timer0_A1_ISR::??INTVEC 88`:
   \   000058   ....         DC16    Timer0_A1_ISR

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0_ISR::??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_A0
     12   Timer0_A0_ISR
       12   -> print_detector_values
       12 ?DivMod16u
     12   Timer0_A1_ISR
       12   -> handle_procedural_delay
       12   -> handle_quart_second_delay
      4   handle_procedural_delay
        4   -> defer_to_shape_menu
        4 ?DivMod16u
      4   handle_quart_second_delay
        4   -> defer_to_shape_menu
        4 ?DivMod16u


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      48  Init_Timer_A0
      34  Timer0_A0_ISR
       2  Timer0_A0_ISR::??INTVEC 90
      48  Timer0_A1_ISR
       2  Timer0_A1_ISR::??INTVEC 88
       2  _A_TA0CCR0_L
       2  _A_TA0CCR1_L
       2  _A_TA0CCR2_L
       2  _A_TA0CCTL0_L
       2  _A_TA0CCTL1_L
       2  _A_TA0CCTL2_L
       2  _A_TA0CTL_L
       2  _A_TA0IV_L
       2  counter_A00
       2  counter_A01
       2  counter_A02
       2  delay_time
      40  handle_procedural_delay
      40  handle_quart_second_delay

 
 128 bytes in segment CODE
  16 bytes in segment DATA16_AN
   8 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
  82 bytes in segment ISR_CODE
 
 210 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
   8 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: none
