###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           06/May/2018  22:52:33
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\menu.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EW879C.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\menu.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\List\menu.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\Obj\menu.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_10\menu.c
      1          //===============================================================
      2          //  File Name: menu.c
      3          //  Description: This file contains the Initialization of all
      4          //                    display values, and LCD menu functions
      5          //
      6          //  Author: Sam Messick
      7          //  Date Feb. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "menu.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
     12          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          int8_t menu_counter;
   \                     menu_counter:
   \   000000                DS8 1

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          char* word1 = "          ";
   \                     word1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for word1>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     15          char* word2 = "          ";
   \                     word2:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for word2>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     16          char* word3 = "          ";
   \                     word3:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for word3>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     17          char* word4 = "          ";
   \                     word4:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for word4>`

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          uint8_t changed_options;                // Flag protecting against random menu bit setting
   \                     changed_options:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          uint8_t prev_menu_frame;                // Previous menu boolean (inner or outer menu)
   \                     prev_menu_frame:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          uint8_t prev_menu_option;               // Previous main menu selection
   \                     prev_menu_option:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          uint8_t current_menu_option;            // Current  main menu selection
   \                     current_menu_option:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          uint8_t prev_sub_menu_option;           // Previous sub  menu selection
   \                     prev_sub_menu_option:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          uint8_t current_sub_menu_option;        // Current  sub  menu selection
   \                     current_sub_menu_option:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          uint8_t reset_ADC_Thumb_min;            // Flag to reset text scrolling in Red and White Song
   \                     reset_ADC_Thumb_min:
   \   000000                DS8 1
     25          

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     26          user_settings_t device_settings = 
   \                     device_settings:
   \   000000                DS8 12
   \   00000C                REQUIRE `?<Initializer for device_settings>`
     27            {
     28              .user_name = (char*)PRESET_USER_NAME,
     29              .wifi_ssid = (char*)PRESET_WIFI_SSID,
     30              .wifi_privacy_mode = (uint8_t*)PRESET_WIFI_PRIVACY_MODE,
     31              .wifi_password = (char*)PRESET_WIFI_PASSWORD,
     32              .wifi_ip_hostname = (char*)PRESET_WIFI_IP_HOSTNAME,
     33              .lcd_brightness = (uint16_t*)PRESET_LCD_BRIGHTNESS,
     34            };
     35          

   \                                 In  segment CODE, align 2
     36          void init_Menu(void){
   \                     init_Menu:
     37            //strcpy(device_settings.user_name, "Sam       ");
     38            //strcpy(device_settings.wifi_ssid, "ncsu      ");
     39            //*(device_settings.wifi_privacy_mode) = 0;
     40            //strcpy(device_settings.wifi_ip_hostname, "ECE_306_06");
     41            LCD_print("          ", "          ", "          ", "          ");
   \   000000   3F40....     MOV.W   #`?<Constant "          ">`, R15
   \   000004   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   000008   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00000C   3C40....     MOV.W   #`?<Constant "          ">`, R12
   \   000010   ........     CALLA   #LCD_print
     42            P5OUT |= LCD_BACKLITE;
   \   000014   F2D080004202 BIS.B   #0x80, &0x242
     43            delay(SECOND_MS);
   \   00001A   3C40E803     MOV.W   #0x3e8, R12
   \   00001E   0D43         MOV.W   #0x0, R13
   \   000020   ........     CALLA   #delay
     44            
     45            lcd_BIG_mid();
   \   000024   ........     CALLA   #lcd_BIG_mid
     46            LCD_print("          ", " ^______^ ", "          ", "          ");
   \   000028   3F40....     MOV.W   #`?<Constant "          ">`, R15
   \   00002C   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   000030   3D40....     MOV.W   #`?<Constant " ^______^ ">`, R13
   \   000034   3C40....     MOV.W   #`?<Constant "          ">`, R12
   \   000038   ........     CALLA   #LCD_print
     47            delay(SECOND_MS);
   \   00003C   3C40E803     MOV.W   #0x3e8, R12
   \   000040   0D43         MOV.W   #0x0, R13
   \   000042   ........     CALLA   #delay
     48            LCD_print("          ", " ^______- ", "          ", "          ");
   \   000046   3F40....     MOV.W   #`?<Constant "          ">`, R15
   \   00004A   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   00004E   3D40....     MOV.W   #`?<Constant " ^______- ">`, R13
   \   000052   3C40....     MOV.W   #`?<Constant "          ">`, R12
   \   000056   ........     CALLA   #LCD_print
     49            delay(QUART_SECOND_MS);
   \   00005A   3C40C800     MOV.W   #0xc8, R12
   \   00005E   0D43         MOV.W   #0x0, R13
   \   000060   ........     CALLA   #delay
     50            LCD_print("          ", " ^______^ ", "          ", "          ");
   \   000064   3F40....     MOV.W   #`?<Constant "          ">`, R15
   \   000068   3E40....     MOV.W   #`?<Constant "          ">`, R14
   \   00006C   3D40....     MOV.W   #`?<Constant " ^______^ ">`, R13
   \   000070   3C40....     MOV.W   #`?<Constant "          ">`, R12
   \   000074   ........     CALLA   #LCD_print
     51            delay(SECOND_MS);
   \   000078   3C40E803     MOV.W   #0x3e8, R12
   \   00007C   0D43         MOV.W   #0x0, R13
   \   00007E   ........     CALLA   #delay
     52            P5OUT &= ~LCD_BACKLITE;
   \   000082   F2C080004202 BIC.B   #0x80, &0x242
     53            
     54            lcd_4line();
   \   000088   ........     CALLA   #lcd_4line
     55            if(device_settings.user_name[CHAR1] == INVALID_PRESET); // have user print name (thumb to choose letter, right/left button to navigate)
     56            LCD_print("  Hello   ", "  there   ", device_settings.user_name, "----------");
   \   00008C   3F40....     MOV.W   #`?<Constant "----------">`, R15
   \   000090   1E42....     MOV.W   &device_settings, R14
   \   000094   3D40....     MOV.W   #`?<Constant "  there   ">`, R13
   \   000098   3C40....     MOV.W   #`?<Constant "  Hello   ">`, R12
   \   00009C   ........     CALLA   #LCD_print
     57            delay(SECOND_MS);
   \   0000A0   3C40E803     MOV.W   #0x3e8, R12
   \   0000A4   0D43         MOV.W   #0x0, R13
   \   0000A6   ........     CALLA   #delay
     58            if(device_settings.wifi_ssid[CHAR1] == INVALID_PRESET); // have user print ssid (thumb to choose letter, right/left button to navigate)
     59            LCD_print("You will  ", "connect to", device_settings.wifi_ssid, "----------");
   \   0000AA   3F40....     MOV.W   #`?<Constant "----------">`, R15
   \   0000AE   1E42....     MOV.W   &device_settings + 2, R14
   \   0000B2   3D40....     MOV.W   #`?<Constant "connect to">`, R13
   \   0000B6   3C40....     MOV.W   #`?<Constant "You will  ">`, R12
   \   0000BA   ........     CALLA   #LCD_print
     60            delay(SECOND_MS);
   \   0000BE   3C40E803     MOV.W   #0x3e8, R12
   \   0000C2   0D43         MOV.W   #0x0, R13
   \   0000C4   ........     CALLA   #delay
     61            if(*(device_settings.wifi_privacy_mode) == (uint8_t)INVALID_PRESET); // have user print mode (thumb to choose mode; right/left button to navigate)
     62              if(*(device_settings.wifi_privacy_mode) == WPA_PERSONAL); // have user enter password if necessary
     63              LCD_print("Network ", " password:", device_settings.wifi_ssid, "----------");
   \   0000C8   3F40....     MOV.W   #`?<Constant "----------">`, R15
   \   0000CC   1E42....     MOV.W   &device_settings + 2, R14
   \   0000D0   3D40....     MOV.W   #`?<Constant " password:">`, R13
   \   0000D4   3C40....     MOV.W   #`?<Constant "Network ">`, R12
   \   0000D8   ........     CALLA   #LCD_print
     64              delay(SECOND_MS);
   \   0000DC   3C40E803     MOV.W   #0x3e8, R12
   \   0000E0   0D43         MOV.W   #0x0, R13
   \   0000E2   ........     CALLA   #delay
     65            if(device_settings.wifi_ip_hostname[CHAR1] == INVALID_PRESET); // have user print hostname (thumb to choose letter, right/left button to navigate)
     66            LCD_print("My name is", "   now:   ", device_settings.wifi_ip_hostname, "----------");
   \   0000E6   3F40....     MOV.W   #`?<Constant "----------">`, R15
   \   0000EA   1E42....     MOV.W   &device_settings + 8, R14
   \   0000EE   3D40....     MOV.W   #`?<Constant "   now:   ">`, R13
   \   0000F2   3C40....     MOV.W   #`?<Constant "My name is">`, R12
   \   0000F6   ........     CALLA   #LCD_print
     67            delay(SECOND_MS);
   \   0000FA   3C40E803     MOV.W   #0x3e8, R12
   \   0000FE   0D43         MOV.W   #0x0, R13
   \   000100   ........     CALLA   #delay
     68            if(*(device_settings.lcd_brightness) == (uint16_t)INVALID_PRESET);          // have user adjust LCD brightness (thumb to choose brightness level)
     69            LCD_print(" That's a ", "  better  ", "lighting! ", "----------");
   \   000104   3F40....     MOV.W   #`?<Constant "----------">`, R15
   \   000108   3E40....     MOV.W   #`?<Constant "lighting! ">`, R14
   \   00010C   3D40....     MOV.W   #`?<Constant "  better  ">`, R13
   \   000110   3C40....     MOV.W   #`?<Constant " That\\'s a ">`, R12
   \   000114   ........     CALLA   #LCD_print
     70            delay(SECOND_MS);
   \   000118   3C40E803     MOV.W   #0x3e8, R12
   \   00011C   0D43         MOV.W   #0x0, R13
   \   00011E   ........     CALLA   #delay
     71            
     72            lcd_BIG_mid();
   \   000122   ........     CALLA   #lcd_BIG_mid
     73            LCD_print("<<<<<<<<<<", " Let's go ", ">>>>>>>>>>", "          ");
   \   000126   3F40....     MOV.W   #`?<Constant "          ">`, R15
   \   00012A   3E40....     MOV.W   #`?<Constant ">>>>>>>>>>">`, R14
   \   00012E   3D40....     MOV.W   #`?<Constant " Let\\'s go ">`, R13
   \   000132   3C40....     MOV.W   #`?<Constant "<<<<<<<<<<">`, R12
   \   000136   ........     CALLA   #LCD_print
     74            delay(THREE_SECOND_MS);
   \   00013A   3C40B80B     MOV.W   #0xbb8, R12
   \   00013E   0D43         MOV.W   #0x0, R13
   \   000140   ........     CALLA   #delay
     75            lcd_4line();
   \   000144   ........     BRA     #lcd_4line
   \   000148                REQUIRE _A_PCOUT_L
     76          }
     77          

   \                                 In  segment CODE, align 2
     78          void LCD_print(char first_line[COLUMN_NUM_COLUMNS], char second_line[COLUMN_NUM_COLUMNS], char third_line[COLUMN_NUM_COLUMNS], char fourth_line[COLUMN_NUM_COLUMNS]){
   \                     LCD_print:
   \   000000   3B15         PUSHM.W #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
   \   000008   094F         MOV.W   R15, R9
     79            strcpy(display_line[LINE1], first_line);
   \   00000A   0D4A         MOV.W   R10, R13
   \   00000C   3C40....     MOV.W   #display_line, R12
   \   000010   ........     CALLA   #strcpy
     80            update_string(display_line[LINE1], LINE1);
   \   000014   0D43         MOV.W   #0x0, R13
   \   000016   ........     CALLA   #update_string
     81            strcpy(display_line[LINE2], second_line);
   \   00001A   0D4B         MOV.W   R11, R13
   \   00001C   3C40....     MOV.W   #display_line + 11, R12
   \   000020   ........     CALLA   #strcpy
     82            update_string(display_line[LINE2], LINE2);
   \   000024   1D43         MOV.W   #0x1, R13
   \   000026   3C40....     MOV.W   #display_line + 11, R12
   \   00002A   ........     CALLA   #update_string
     83            strcpy(display_line[LINE3], third_line);
   \   00002E   0D48         MOV.W   R8, R13
   \   000030   3C40....     MOV.W   #display_line + 22, R12
   \   000034   ........     CALLA   #strcpy
     84            update_string(display_line[LINE3], LINE3);
   \   000038   2D43         MOV.W   #0x2, R13
   \   00003A   3C40....     MOV.W   #display_line + 22, R12
   \   00003E   ........     CALLA   #update_string
     85            strcpy(display_line[LINE4], fourth_line);
   \   000042   0D49         MOV.W   R9, R13
   \   000044   3C40....     MOV.W   #display_line + 33, R12
   \   000048   ........     CALLA   #strcpy
     86            update_string(display_line[LINE4], LINE4);
   \   00004C   3D400300     MOV.W   #0x3, R13
   \   000050   3C40....     MOV.W   #display_line + 33, R12
   \   000054   ........     CALLA   #update_string
     87            display_changed = true; 
   \   000058   D243....     MOV.B   #0x1, &display_changed
     88            update_display  = true;
   \   00005C   D243....     MOV.B   #0x1, &update_display
     89            Display_Process();                     // Refresh LCD screen
   \   000060   ........     CALLA   #Display_Process
     90          }
   \   000064   3817         POPM.W  #0x4, R11
   \   000066   1001         RETA
     91          

   \                                 In  segment CODE, align 2
     92          void hex_to_dec(char* output_line, uint32_t hexadecimal){
   \                     hex_to_dec:
   \   000000   5B15         PUSHM.W #0x6, R11
     93            uint8_t HThousand = COUNTER_RESET;      // Counts hundred thousands
   \   000002   4D43         MOV.B   #0x0, R13
     94            uint8_t TThousand = COUNTER_RESET;      // Counts ten thousands
   \   000004   4A43         MOV.B   #0x0, R10
     95            uint8_t Thousand  = COUNTER_RESET;       // Counts thousands
   \   000006   4643         MOV.B   #0x0, R6
     96            uint8_t Hundred   = COUNTER_RESET;        // Counts hundreds
   \   000008   4B43         MOV.B   #0x0, R11
     97            uint8_t Ten       = COUNTER_RESET;            // Counts tens
   \   00000A   4843         MOV.B   #0x0, R8
     98            uint8_t One       = COUNTER_RESET;            // Counts ones
   \   00000C   4943         MOV.B   #0x0, R9
     99            
    100            while(hexadecimal >= HTHOUSAND)
   \                     ??hex_to_dec_0:
   \   00000E   1F93         CMP.W   #0x1, R15
   \   000010   0A28         JNC     ??hex_to_dec_1
   \   000012   0320         JNE     ??hex_to_dec_6
   \   000014   3E90A086     CMP.W   #0x86a0, R14
   \   000018   0628         JNC     ??hex_to_dec_1
    101            {
    102              HThousand++;
   \                     ??hex_to_dec_6:
   \   00001A   5D53         ADD.B   #0x1, R13
    103              hexadecimal -= HTHOUSAND;
   \   00001C   3E506079     ADD.W   #0x7960, R14
   \   000020   3F60FEFF     ADDC.W  #0xfffe, R15
   \   000024   F43F         JMP     ??hex_to_dec_0
    104            }
    105            while(hexadecimal >= TTHOUSAND)
   \                     ??hex_to_dec_1:
   \   000026   0F93         CMP.W   #0x0, R15
   \   000028   0928         JNC     ??hex_to_dec_2
   \   00002A   0320         JNE     ??hex_to_dec_7
   \   00002C   3E901027     CMP.W   #0x2710, R14
   \   000030   0528         JNC     ??hex_to_dec_2
    106            {
    107              TThousand++;
   \                     ??hex_to_dec_7:
   \   000032   5A53         ADD.B   #0x1, R10
    108              hexadecimal -= TTHOUSAND;
   \   000034   3E50F0D8     ADD.W   #0xd8f0, R14
   \   000038   3F63         ADDC.W  #0xffff, R15
   \   00003A   F53F         JMP     ??hex_to_dec_1
    109            }
    110            while(hexadecimal >= THOUSAND)
   \                     ??hex_to_dec_2:
   \   00003C   0F93         CMP.W   #0x0, R15
   \   00003E   0928         JNC     ??hex_to_dec_3
   \   000040   0320         JNE     ??hex_to_dec_8
   \   000042   3E90E803     CMP.W   #0x3e8, R14
   \   000046   0528         JNC     ??hex_to_dec_3
    111            {
    112              Thousand++;
   \                     ??hex_to_dec_8:
   \   000048   5653         ADD.B   #0x1, R6
    113              hexadecimal -= THOUSAND;
   \   00004A   3E5018FC     ADD.W   #0xfc18, R14
   \   00004E   3F63         ADDC.W  #0xffff, R15
   \   000050   F53F         JMP     ??hex_to_dec_2
    114            }
    115            while(hexadecimal >= HUNDRED)
   \                     ??hex_to_dec_3:
   \   000052   0F93         CMP.W   #0x0, R15
   \   000054   0928         JNC     ??hex_to_dec_4
   \   000056   0320         JNE     ??hex_to_dec_9
   \   000058   3E906400     CMP.W   #0x64, R14
   \   00005C   0528         JNC     ??hex_to_dec_4
    116            {
    117              Hundred++;
   \                     ??hex_to_dec_9:
   \   00005E   5B53         ADD.B   #0x1, R11
    118              hexadecimal -= HUNDRED;
   \   000060   3E509CFF     ADD.W   #0xff9c, R14
   \   000064   3F63         ADDC.W  #0xffff, R15
   \   000066   F53F         JMP     ??hex_to_dec_3
    119            }
    120            while(hexadecimal >= TEN)
   \                     ??hex_to_dec_4:
   \   000068   0F93         CMP.W   #0x0, R15
   \   00006A   0928         JNC     ??hex_to_dec_5
   \   00006C   0320         JNE     ??hex_to_dec_10
   \   00006E   3E900A00     CMP.W   #0xa, R14
   \   000072   0528         JNC     ??hex_to_dec_5
    121            {
    122              Ten++;
   \                     ??hex_to_dec_10:
   \   000074   5853         ADD.B   #0x1, R8
    123              hexadecimal -= TEN;
   \   000076   3E50F6FF     ADD.W   #0xfff6, R14
   \   00007A   3F63         ADDC.W  #0xffff, R15
   \   00007C   F53F         JMP     ??hex_to_dec_4
    124            }
    125            while(hexadecimal >= ONE)
   \                     ??hex_to_dec_5:
   \   00007E   074E         MOV.W   R14, R7
   \   000080   E70F         ADDA    R15, R7
   \   000082   0424         JEQ     ??hex_to_dec_11
    126            {
    127              One++;
   \   000084   5953         ADD.B   #0x1, R9
    128              hexadecimal--;
   \   000086   3E53         ADD.W   #0xffff, R14
   \   000088   3F63         ADDC.W  #0xffff, R15
   \   00008A   F93F         JMP     ??hex_to_dec_5
    129            }
    130            output_line[COLUMN1] = HThousand + ASCII_NUM_SHIFT;
   \                     ??hex_to_dec_11:
   \   00008C   474D         MOV.B   R13, R7
   \   00008E   77503000     ADD.B   #0x30, R7
   \   000092   CC470000     MOV.B   R7, 0(R12)
    131            output_line[COLUMN2] = TThousand + ASCII_NUM_SHIFT;
   \   000096   474A         MOV.B   R10, R7
   \   000098   77503000     ADD.B   #0x30, R7
   \   00009C   CC470100     MOV.B   R7, 0x1(R12)
    132            output_line[COLUMN3] = Thousand + ASCII_NUM_SHIFT;
   \   0000A0   4746         MOV.B   R6, R7
   \   0000A2   77503000     ADD.B   #0x30, R7
   \   0000A6   CC470200     MOV.B   R7, 0x2(R12)
    133            output_line[COLUMN4] = Hundred  + ASCII_NUM_SHIFT;
   \   0000AA   474B         MOV.B   R11, R7
   \   0000AC   77503000     ADD.B   #0x30, R7
   \   0000B0   CC470300     MOV.B   R7, 0x3(R12)
    134            output_line[COLUMN5] = Ten      + ASCII_NUM_SHIFT;
   \   0000B4   4748         MOV.B   R8, R7
   \   0000B6   77503000     ADD.B   #0x30, R7
   \   0000BA   CC470400     MOV.B   R7, 0x4(R12)
    135            output_line[COLUMN6] = One      + ASCII_NUM_SHIFT;
   \   0000BE   4749         MOV.B   R9, R7
   \   0000C0   77503000     ADD.B   #0x30, R7
   \   0000C4   CC470500     MOV.B   R7, 0x5(R12)
    136          }
   \   0000C8   5617         POPM.W  #0x6, R11
   \   0000CA   1001         RETA

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for word1>`:
   \   000000   ....         DC16 `?<Constant "          ">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for word2>`:
   \   000000   ....         DC16 `?<Constant "          ">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for word3>`:
   \   000000   ....         DC16 `?<Constant "          ">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for word4>`:
   \   000000   ....         DC16 `?<Constant "          ">`

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for device_settings>`:
   \   000000   00180B181718 DC16 1800H, 180BH, 1817H, 1818H, 1824H, 182FH
   \            181824182F18

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ^______^ ">`:
   \   000000   205E5F5F5F5F DC8 " ^______^ "
   \            5F5F5E2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " ^______- ">`:
   \   000000   205E5F5F5F5F DC8 " ^______- "
   \            5F5F2D2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Hello   ">`:
   \   000000   202048656C6C DC8 "  Hello   "
   \            6F20202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  there   ">`:
   \   000000   202074686572 DC8 "  there   "
   \            6520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "----------">`:
   \   000000   2D2D2D2D2D2D DC8 "----------"
   \            2D2D2D2D00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "You will  ">`:
   \   000000   596F75207769 DC8 "You will  "
   \            6C6C202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "connect to">`:
   \   000000   636F6E6E6563 DC8 "connect to"
   \            7420746F00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Network ">`:
   \   000000   4E6574776F72 DC8 "Network "
   \            6B2000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " password:">`:
   \   000000   207061737377 DC8 " password:"
   \            6F72643A00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "My name is">`:
   \   000000   4D79206E616D DC8 "My name is"
   \            6520697300  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   now:   ">`:
   \   000000   2020206E6F77 DC8 "   now:   "
   \            3A20202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " That\\'s a ">`:
   \   000000   205468617427 DC8 " That's a "
   \            7320612000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  better  ">`:
   \   000000   202062657474 DC8 "  better  "
   \            6572202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "lighting! ">`:
   \   000000   6C6967687469 DC8 "lighting! "
   \            6E67212000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "<<<<<<<<<<">`:
   \   000000   3C3C3C3C3C3C DC8 "<<<<<<<<<<"
   \            3C3C3C3C00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Let\\'s go ">`:
   \   000000   204C65742773 DC8 " Let's go "
   \            20676F2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant ">>>>>>>>>>">`:
   \   000000   3E3E3E3E3E3E DC8 ">>>>>>>>>>"
   \            3E3E3E3E00  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   LCD_print
       12   -> Display_Process
       12   -> strcpy
       12   -> update_string
     16   hex_to_dec
      4   init_Menu
        4   -> LCD_print
        4   -> delay
        0   -> lcd_4line
        4   -> lcd_4line
        4   -> lcd_BIG_mid


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      11  ?<Constant "   now:   ">
      11  ?<Constant "  Hello   ">
      11  ?<Constant "  better  ">
      11  ?<Constant "  there   ">
      11  ?<Constant " Let\'s go ">
      11  ?<Constant " That\'s a ">
      11  ?<Constant " ^______- ">
      11  ?<Constant " ^______^ ">
      11  ?<Constant " password:">
      11  ?<Constant "----------">
      11  ?<Constant "<<<<<<<<<<">
      11  ?<Constant ">>>>>>>>>>">
      11  ?<Constant "My name is">
       9  ?<Constant "Network ">
      11  ?<Constant "You will  ">
      11  ?<Constant "connect to">
      11  ?<Constant "lighting! ">
      12  ?<Initializer for device_settings>
       2  ?<Initializer for word1>
       2  ?<Initializer for word2>
       2  ?<Initializer for word3>
       2  ?<Initializer for word4>
     104  LCD_print
       2  _A_PCOUT_L
       1  changed_options
       1  current_menu_option
       1  current_sub_menu_option
      12  device_settings
     204  hex_to_dec
     328  init_Menu
       1  menu_counter
       1  prev_menu_frame
       1  prev_menu_option
       1  prev_sub_menu_option
       1  reset_ADC_Thumb_min
       2  word1
       2  word2
       2  word3
       2  word4

 
 636 bytes in segment CODE
   2 bytes in segment DATA16_AN
 196 bytes in segment DATA16_C
  20 bytes in segment DATA16_I
  20 bytes in segment DATA16_ID
   8 bytes in segment DATA16_Z
 
 636 bytes of CODE  memory
 216 bytes of CONST memory
  28 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
