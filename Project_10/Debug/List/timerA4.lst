###############################################################################
#
# IAR C/C++ Compiler V7.11.1.983/W32 for MSP430           30/Apr/2018  02:52:50
# Copyright 1996-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.11
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\timerA4.c
#    Command line  =  
#        -f C:\Users\shmes\AppData\Local\Temp\EWC2E9.tmp
#        ("C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\timerA4.c" -lC
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\List" -o
#        "C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR5994__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\430\lib\dlib\dl430xlsfn.h"
#        --core=430X --data_model=small -On --multiplier=32
#        --hw_workaround=CPU40 --code_model=large)
#    Locale        =  Spanish_USA.1252
#    List file     =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\List\timerA4.lst
#    Object file   =  
#        C:\Users\shmes\Desktop\Escritorio
#        Personal\Escuela\ECE\306\ECE306\Project_10\Debug\Obj\timerA4.r43
#
###############################################################################

C:\Users\shmes\Desktop\Escritorio Personal\Escuela\ECE\306\ECE306\Project_10\timerA4.c
      1          //===============================================================
      2          //  File Name: timerA4.c
      3          //  Description: This file contains the initialization of timer
      4          //                    A4 and the LCD Backlight's PWM
      5          //
      6          //  Author: Sam Messick
      7          //  Date Apr. 2018
      8          //  Compiler Build with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //===============================================================
     10          
     11          #include "timerA4.h"

   \                                 In  segment DATA16_AN, at 0x7c0
   \   union <unnamed> _A_TA4CTL_L
   \                     _A_TA4CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x7c4
   \   union <unnamed> _A_TA4CCTL1_L
   \                     _A_TA4CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x7d4
   \   union <unnamed> _A_TA4CCR1_L
   \                     _A_TA4CCR1_L:
   \   000000                DS8 2
     12          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          uint16_t current_lcd_brightness;
   \                     current_lcd_brightness:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          uint8_t backlite_status_reg;
   \                     backlite_status_reg:
   \   000000                DS8 1
     15          

   \                                 In  segment CODE, align 2
     16          void init_Timer_A4(void){
   \                     init_Timer_A4:
     17          
     18            TA4CTL  = TASSEL__ACLK;               // Select SMCLK for source
   \   000000   B2400001C007 MOV.W   #0x100, &0x7c0
     19            TA4CTL |= (TACLR | MC_2 | ID_1);      // AClock source on up mode at 32 KHz
   \   000006   B2D06400C007 BIS.W   #0x64, &0x7c0
     20            TA4CTL |= TAIDEX__1; 
   \   00000C   9242C007C007 MOV.W   &0x7c0, &0x7c0
     21            TA4CTL &= ~(TAIFG);                    // Clear Timer A1 interrupt flag and interrupt enable
   \   000012   92C3C007     BIC.W   #0x1, &0x7c0
     22            
     23            TA4CCTL1 |= OUTMOD_7;                 //  LCD backlite in Reset/Set mode
   \   000016   B2D0E000C407 BIS.W   #0xe0, &0x7c4
     24            TA4CCR1   = NO_LIGHTING;              //  Begin with backlite off
   \   00001C   8243D407     MOV.W   #0x0, &0x7d4
     25          }
   \   000020   1001         RETA
   \   000022                REQUIRE _A_TA4CTL_L
   \   000022                REQUIRE _A_TA4CCTL1_L
   \   000022                REQUIRE _A_TA4CCR1_L
     26          

   \                                 In  segment CODE, align 2
     27          void dim_lcd(uint32_t preferred_brightness) {
   \                     dim_lcd:
     28            current_lcd_brightness = preferred_brightness;
   \   000000   824C....     MOV.W   R12, &current_lcd_brightness
     29            TA4CCTL1 |= CCIE;
   \   000004   B2D01000C407 BIS.W   #0x10, &0x7c4
     30          }
   \   00000A   1001         RETA
   \   00000C                REQUIRE _A_TA4CCTL1_L
     31          
     32          //   Timer A4 interrupt routines        //
     33          //         **OVERFLOW**                 //
     34          // ---Backlite brightness adjustment--- //
     35          #pragma vector = TIMER4_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     36          __interrupt void Timer4_A1_ISR(void){
   \                     Timer4_A1_ISR:
     37            
     38            if(TA4CCR1 > current_lcd_brightness &&  
     39               TA4CCR1 != current_lcd_brightness)
   \   000000   9292D407.... CMP.W   &0x7d4, &current_lcd_brightness
   \   000006   072C         JC      ??Timer4_A1_ISR_0
   \   000008   9292....D407 CMP.W   &current_lcd_brightness, &0x7d4
   \   00000E   0324         JEQ     ??Timer4_A1_ISR_0
     40                --TA4CCR1;                  // Dim Backlite to preferred brightness
   \   000010   B253D407     ADD.W   #0xffff, &0x7d4
   \   000014   0013         RETI
     41              
     42            else if(TA4CCR1 < current_lcd_brightness &&
     43                    TA4CCR1 != current_lcd_brightness)
   \                     ??Timer4_A1_ISR_0:
   \   000016   9292....D407 CMP.W   &current_lcd_brightness, &0x7d4
   \   00001C   072C         JC      ??Timer4_A1_ISR_1
   \   00001E   9292....D407 CMP.W   &current_lcd_brightness, &0x7d4
   \   000024   0324         JEQ     ??Timer4_A1_ISR_1
     44                ++TA4CCR1;                 // Brighten Backlite to preferred brightness
   \   000026   9253D407     ADD.W   #0x1, &0x7d4
   \   00002A   0013         RETI
     45            
     46            else
     47            {
     48              DISABLE_BACKLITE_INTERRUPT;
   \                     ??Timer4_A1_ISR_1:
   \   00002C   B2C01000C407 BIC.W   #0x10, &0x7c4
     49              BACKLITE_DISABLE(BACKLITE_ADJUSTING);
   \   000032   D2C3....     BIC.B   #0x1, &backlite_status_reg
     50            }  
     51          }
   \   000036   0013         RETI
   \   000038                REQUIRE _A_TA4CCR1_L
   \   000038                REQUIRE _A_TA4CCTL1_L

   \                                 In  segment INTVEC, offset 0x38, root
   \                     `??Timer4_A1_ISR::??INTVEC 56`:
   \   000038   ....         DC16    Timer4_A1_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Timer4_A1_ISR
      4   dim_lcd
      4   init_Timer_A4


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  Timer4_A1_ISR
       2  Timer4_A1_ISR::??INTVEC 56
       2  _A_TA4CCR1_L
       2  _A_TA4CCTL1_L
       2  _A_TA4CTL_L
       1  backlite_status_reg
       2  current_lcd_brightness
      12  dim_lcd
      34  init_Timer_A4

 
 46 bytes in segment CODE
  6 bytes in segment DATA16_AN
  3 bytes in segment DATA16_Z
  2 bytes in segment INTVEC
 56 bytes in segment ISR_CODE
 
 102 bytes of CODE  memory
   0 bytes of CONST memory (+ 2 bytes shared)
   3 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
